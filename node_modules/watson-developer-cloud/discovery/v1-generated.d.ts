/**
 * Copyright 2018 IBM All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { AxiosResponse } from 'axios';
import { BaseService } from 'ibm-cloud-sdk-core';
import { FileObject } from 'ibm-cloud-sdk-core';
/**
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 */
declare class DiscoveryV1 extends BaseService {
    static URL: string;
    name: string;
    serviceVersion: string;
    /**
     * Construct a DiscoveryV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses the API version for the date you specify, or the most recent version before that date. Note that you should not programmatically specify the current date at runtime, in case the API has been updated since your application's release. Instead, specify a version date that is compatible with your application, and don't change it until your application is ready for a later version.
     * @param {string} [options.url] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/discovery/api'). The base url may differ between Bluemix regions.
     * @param {string} [options.username] - The username used to authenticate with the service. Username and password credentials are only required to run your application locally or outside of Bluemix. When running on Bluemix, the credentials will be automatically loaded from the `VCAP_SERVICES` environment variable.
     * @param {string} [options.password] - The password used to authenticate with the service. Username and password credentials are only required to run your application locally or outside of Bluemix. When running on Bluemix, the credentials will be automatically loaded from the `VCAP_SERVICES` environment variable.
     * @param {string} [options.iam_access_token] - An IAM access token fully managed by the application. Responsibility falls on the application to refresh the token, either before it expires or reactively upon receiving a 401 from the service, as any requests made with an expired token will fail.
     * @param {string} [options.iam_apikey] - An API key that can be used to request IAM tokens. If this API key is provided, the SDK will manage the token and handle the refreshing.
     * @param {string} [options.iam_url] - An optional URL for the IAM service API. Defaults to 'https://iam.bluemix.net/identity/token'.
     * @param {boolean} [options.use_unauthenticated] - Set to `true` to avoid including an authorization header. This option may be useful for requests that are proxied.
     * @param {Object} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {boolean} [options.headers.X-Watson-Learning-Opt-Out] - Set to `true` to opt-out of data collection. By default, all IBM Watson services log requests and their results. Logging is done only to improve the services for future users. The logged data is not shared or made public. If you are concerned with protecting the privacy of users' personal information or otherwise do not want your requests to be logged, you can opt out of logging.
     * @constructor
     * @returns {DiscoveryV1}
     * @throws {Error}
     */
    constructor(options: DiscoveryV1.Options);
    /*************************
     * environments
     ************************/
    /**
     * Create an environment.
     *
     * Creates a new environment for private data. An environment must be created before collections can be created.
     *
     * **Note**: You can create only one environment for private data per service instance. An attempt to create another
     * environment results in an error.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name that identifies the environment.
     * @param {string} [params.description] - Description of the environment.
     * @param {string} [params.size] - Size of the environment. In the Lite plan the default and only accepted value is
     * `LT`, in all other plans the default is `S`.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createEnvironment(params: DiscoveryV1.CreateEnvironmentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Environment>): Promise<any> | void;
    /**
     * Delete environment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteEnvironment(params: DiscoveryV1.DeleteEnvironmentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DeleteEnvironmentResponse>): Promise<any> | void;
    /**
     * Get environment info.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getEnvironment(params: DiscoveryV1.GetEnvironmentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Environment>): Promise<any> | void;
    /**
     * List environments.
     *
     * List existing environments for the service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - Show only the environment with the given name.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listEnvironments(params?: DiscoveryV1.ListEnvironmentsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.ListEnvironmentsResponse>): Promise<any> | void;
    /**
     * List fields across collections.
     *
     * Gets a list of the unique fields (and their types) stored in the indexes of the specified collections.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string[]} params.collection_ids - A comma-separated list of collection IDs to be queried against.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listFields(params: DiscoveryV1.ListFieldsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.ListCollectionFieldsResponse>): Promise<any> | void;
    /**
     * Update an environment.
     *
     * Updates an environment. The environment's **name** and  **description** parameters can be changed. You must specify
     * a **name** for the environment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.name] - Name that identifies the environment.
     * @param {string} [params.description] - Description of the environment.
     * @param {string} [params.size] - Size that the environment should be increased to. Environment size cannot be
     * modified when using a Lite plan. Environment size can only increased and not decreased.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateEnvironment(params: DiscoveryV1.UpdateEnvironmentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Environment>): Promise<any> | void;
    /*************************
     * configurations
     ************************/
    /**
     * Add configuration.
     *
     * Creates a new configuration.
     *
     * If the input configuration contains the **configuration_id**, **created**, or **updated** properties, then they are
     * ignored and overridden by the system, and an error is not returned so that the overridden fields do not need to be
     * removed when copying a configuration.
     *
     * The configuration can contain unrecognized JSON fields. Any such fields are ignored and do not generate an error.
     * This makes it easier to use newer configuration files with older versions of the API and the service. It also makes
     * it possible for the tooling to add additional metadata and information to the configuration.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.name - The name of the configuration.
     * @param {string} [params.description] - The description of the configuration, if available.
     * @param {Conversions} [params.conversions] - Document conversion settings.
     * @param {Enrichment[]} [params.enrichments] - An array of document enrichment settings for the configuration.
     * @param {NormalizationOperation[]} [params.normalizations] - Defines operations that can be used to transform the
     * final output JSON into a normalized form. Operations are executed in the order that they appear in the array.
     * @param {Source} [params.source] - Object containing source parameters for the configuration.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createConfiguration(params: DiscoveryV1.CreateConfigurationParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Configuration>): Promise<any> | void;
    /**
     * Delete a configuration.
     *
     * The deletion is performed unconditionally. A configuration deletion request succeeds even if the configuration is
     * referenced by a collection or document ingestion. However, documents that have already been submitted for
     * processing continue to use the deleted configuration. Documents are always processed with a snapshot of the
     * configuration as it existed at the time the document was submitted.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.configuration_id - The ID of the configuration.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteConfiguration(params: DiscoveryV1.DeleteConfigurationParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DeleteConfigurationResponse>): Promise<any> | void;
    /**
     * Get configuration details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.configuration_id - The ID of the configuration.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getConfiguration(params: DiscoveryV1.GetConfigurationParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Configuration>): Promise<any> | void;
    /**
     * List configurations.
     *
     * Lists existing configurations for the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.name] - Find configurations with the given name.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listConfigurations(params: DiscoveryV1.ListConfigurationsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.ListConfigurationsResponse>): Promise<any> | void;
    /**
     * Update a configuration.
     *
     * Replaces an existing configuration.
     *   * Completely replaces the original configuration.
     *   * The **configuration_id**, **updated**, and **created** fields are accepted in the request, but they are
     * ignored, and an error is not generated. It is also acceptable for users to submit an updated configuration with
     * none of the three properties.
     *   * Documents are processed with a snapshot of the configuration as it was at the time the document was submitted
     * to be ingested. This means that already submitted documents will not see any updates made to the configuration.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.configuration_id - The ID of the configuration.
     * @param {string} params.name - The name of the configuration.
     * @param {string} [params.description] - The description of the configuration, if available.
     * @param {Conversions} [params.conversions] - Document conversion settings.
     * @param {Enrichment[]} [params.enrichments] - An array of document enrichment settings for the configuration.
     * @param {NormalizationOperation[]} [params.normalizations] - Defines operations that can be used to transform the
     * final output JSON into a normalized form. Operations are executed in the order that they appear in the array.
     * @param {Source} [params.source] - Object containing source parameters for the configuration.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateConfiguration(params: DiscoveryV1.UpdateConfigurationParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Configuration>): Promise<any> | void;
    /*************************
     * testYourConfigurationOnADocument
     ************************/
    /**
     * Test configuration.
     *
     * Runs a sample document through the default or your configuration and returns diagnostic information designed to
     * help you understand how the document was processed. The document is not added to the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.configuration] - The configuration to use to process the document. If this part is
     * provided, then the provided configuration is used to process the document. If the **configuration_id** is also
     * provided (both are present at the same time), then request is rejected. The maximum supported configuration size is
     * 1 MB. Configuration parts larger than 1 MB are rejected.
     * See the `GET /configurations/{configuration_id}` operation for an example configuration.
     * @param {NodeJS.ReadableStream|FileObject|Buffer} [params.file] - The content of the document to ingest. The maximum
     * supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when
     * testing a confiruration is 1 megabyte. Files larger than the supported size are rejected.
     * @param {string} [params.filename] - The filename for file.
     * @param {string} [params.file_content_type] - The content type of file.
     * @param {string} [params.metadata] - If you're using the Data Crawler to upload your documents, you can test a
     * document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is
     * 1 MB. Metadata parts larger than 1 MB are rejected.
     * Example:  ``` {
     *   "Creator": "Johnny Appleseed",
     *   "Subject": "Apples"
     * } ```.
     * @param {string} [params.step] - Specify to only run the input document through the given step instead of running
     * the input document through the entire ingestion workflow. Valid values are `convert`, `enrich`, and `normalize`.
     * @param {string} [params.configuration_id] - The ID of the configuration to use to process the document. If the
     * **configuration** form part is also provided (both are present at the same time), then the request will be
     * rejected.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    testConfigurationInEnvironment(params: DiscoveryV1.TestConfigurationInEnvironmentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TestDocument>): Promise<any> | void;
    /*************************
     * collections
     ************************/
    /**
     * Create a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.name - The name of the collection to be created.
     * @param {string} [params.description] - A description of the collection.
     * @param {string} [params.configuration_id] - The ID of the configuration in which the collection is to be created.
     * @param {string} [params.language] - The language of the documents stored in the collection, in the form of an ISO
     * 639-1 language code.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createCollection(params: DiscoveryV1.CreateCollectionParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Collection>): Promise<any> | void;
    /**
     * Delete a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteCollection(params: DiscoveryV1.DeleteCollectionParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DeleteCollectionResponse>): Promise<any> | void;
    /**
     * Get collection details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getCollection(params: DiscoveryV1.GetCollectionParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Collection>): Promise<any> | void;
    /**
     * List collection fields.
     *
     * Gets a list of the unique fields (and their types) stored in the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listCollectionFields(params: DiscoveryV1.ListCollectionFieldsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.ListCollectionFieldsResponse>): Promise<any> | void;
    /**
     * List collections.
     *
     * Lists existing collections for the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.name] - Find collections with the given name.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listCollections(params: DiscoveryV1.ListCollectionsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.ListCollectionsResponse>): Promise<any> | void;
    /**
     * Update a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.name - The name of the collection.
     * @param {string} [params.description] - A description of the collection.
     * @param {string} [params.configuration_id] - The ID of the configuration in which the collection is to be updated.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateCollection(params: DiscoveryV1.UpdateCollectionParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Collection>): Promise<any> | void;
    /*************************
     * queryModifications
     ************************/
    /**
     * Create or update expansion list.
     *
     * Create or replace the Expansion list for this collection. The maximum number of expanded terms per collection is
     * `500`.
     * The current expansion list is replaced with the uploaded content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Expansion[]} params.expansions - An array of query expansion definitions.
     *
     *  Each object in the **expansions** array represents a term or set of terms that will be expanded into other terms.
     * Each expansion object can be configured as bidirectional or unidirectional. Bidirectional means that all terms are
     * expanded to all other terms in the object. Unidirectional means that a set list of terms can be expanded into a
     * second list of terms.
     *
     *  To create a bi-directional expansion specify an **expanded_terms** array. When found in a query, all items in the
     * **expanded_terms** array are then expanded to the other items in the same array.
     *
     *  To create a uni-directional expansion, specify both an array of **input_terms** and an array of
     * **expanded_terms**. When items in the **input_terms** array are present in a query, they are expanded using the
     * items listed in the **expanded_terms** array.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createExpansions(params: DiscoveryV1.CreateExpansionsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Expansions>): Promise<any> | void;
    /**
     * Create stopword list.
     *
     * Upload a custom stopword list to use with the specified collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {NodeJS.ReadableStream|FileObject|Buffer} params.stopword_file - The content of the stopword list to ingest.
     * @param {string} params.stopword_filename - The filename for stopword_file.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createStopwordList(params: DiscoveryV1.CreateStopwordListParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TokenDictStatusResponse>): Promise<any> | void;
    /**
     * Create tokenization dictionary.
     *
     * Upload a custom tokenization dictionary to use with the specified collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {TokenDictRule[]} [params.tokenization_rules] - An array of tokenization rules. Each rule contains, the
     * original `text` string, component `tokens`, any alternate character set `readings`, and which `part_of_speech` the
     * text is from.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createTokenizationDictionary(params: DiscoveryV1.CreateTokenizationDictionaryParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TokenDictStatusResponse>): Promise<any> | void;
    /**
     * Delete the expansion list.
     *
     * Remove the expansion information for this collection. The expansion list must be deleted to disable query expansion
     * for a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteExpansions(params: DiscoveryV1.DeleteExpansionsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Delete a custom stopword list.
     *
     * Delete a custom stopword list from the collection. After a custom stopword list is deleted, the default list is
     * used for the collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteStopwordList(params: DiscoveryV1.DeleteStopwordListParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Delete tokenization dictionary.
     *
     * Delete the tokenization dictionary from the collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteTokenizationDictionary(params: DiscoveryV1.DeleteTokenizationDictionaryParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Get stopword list status.
     *
     * Returns the current status of the stopword list for the specified collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getStopwordListStatus(params: DiscoveryV1.GetStopwordListStatusParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TokenDictStatusResponse>): Promise<any> | void;
    /**
     * Get tokenization dictionary status.
     *
     * Returns the current status of the tokenization dictionary for the specified collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getTokenizationDictionaryStatus(params: DiscoveryV1.GetTokenizationDictionaryStatusParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TokenDictStatusResponse>): Promise<any> | void;
    /**
     * Get the expansion list.
     *
     * Returns the current expansion list for the specified collection. If an expansion list is not specified, an object
     * with empty expansion arrays is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listExpansions(params: DiscoveryV1.ListExpansionsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Expansions>): Promise<any> | void;
    /*************************
     * documents
     ************************/
    /**
     * Add a document.
     *
     * Add a document to a collection with optional metadata.
     *
     *   * The **version** query parameter is still required.
     *
     *   * Returns immediately after the system has accepted the document for processing.
     *
     *   * The user must provide document content, metadata, or both. If the request is missing both document content and
     * metadata, it is rejected.
     *
     *   * The user can set the **Content-Type** parameter on the **file** part to indicate the media type of the
     * document. If the **Content-Type** parameter is missing or is one of the generic media types (for example,
     * `application/octet-stream`), then the service attempts to automatically detect the document's media type.
     *
     *   * The following field names are reserved and will be filtered out if present after normalization: `id`, `score`,
     * `highlight`, and any field with the prefix of: `_`, `+`, or `-`
     *
     *   * Fields with empty name values after normalization are filtered out before indexing.
     *
     *   * Fields containing the following characters after normalization are filtered out before indexing: `#` and `,`
     *
     *  **Note:** Documents can be added with a specific **document_id** by using the
     * **_/v1/environments/{environment_id}/collections/{collection_id}/documents** method.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {NodeJS.ReadableStream|FileObject|Buffer} [params.file] - The content of the document to ingest. The maximum
     * supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when
     * testing a confiruration is 1 megabyte. Files larger than the supported size are rejected.
     * @param {string} [params.filename] - The filename for file.
     * @param {string} [params.file_content_type] - The content type of file.
     * @param {string} [params.metadata] - If you're using the Data Crawler to upload your documents, you can test a
     * document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is
     * 1 MB. Metadata parts larger than 1 MB are rejected.
     * Example:  ``` {
     *   "Creator": "Johnny Appleseed",
     *   "Subject": "Apples"
     * } ```.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    addDocument(params: DiscoveryV1.AddDocumentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DocumentAccepted>): Promise<any> | void;
    /**
     * Delete a document.
     *
     * If the given document ID is invalid, or if the document is not found, then the a success response is returned (HTTP
     * status code `200`) with the status set to 'deleted'.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.document_id - The ID of the document.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteDocument(params: DiscoveryV1.DeleteDocumentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DeleteDocumentResponse>): Promise<any> | void;
    /**
     * Get document details.
     *
     * Fetch status details about a submitted document. **Note:** this operation does not return the document itself.
     * Instead, it returns only the document's processing status and any notices (warnings or errors) that were generated
     * when the document was ingested. Use the query API to retrieve the actual document content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.document_id - The ID of the document.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getDocumentStatus(params: DiscoveryV1.GetDocumentStatusParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DocumentStatus>): Promise<any> | void;
    /**
     * Update a document.
     *
     * Replace an existing document or add a document with a specified **document_id**. Starts ingesting a document with
     * optional metadata.
     *
     * **Note:** When uploading a new document with this method it automatically replaces any document stored with the
     * same **document_id** if it exists.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.document_id - The ID of the document.
     * @param {NodeJS.ReadableStream|FileObject|Buffer} [params.file] - The content of the document to ingest. The maximum
     * supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when
     * testing a confiruration is 1 megabyte. Files larger than the supported size are rejected.
     * @param {string} [params.filename] - The filename for file.
     * @param {string} [params.file_content_type] - The content type of file.
     * @param {string} [params.metadata] - If you're using the Data Crawler to upload your documents, you can test a
     * document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is
     * 1 MB. Metadata parts larger than 1 MB are rejected.
     * Example:  ``` {
     *   "Creator": "Johnny Appleseed",
     *   "Subject": "Apples"
     * } ```.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateDocument(params: DiscoveryV1.UpdateDocumentParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DocumentAccepted>): Promise<any> | void;
    /*************************
     * queries
     ************************/
    /**
     * Long environment queries.
     *
     * Complex queries might be too long for a standard method query. By using this method, you can construct longer
     * queries. However, these queries may take longer to complete than the standard method. For details, see the
     * [Discovery service
     * documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-query-concepts#query-concepts).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.
     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and
     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most
     * relevant search results. You cannot use **natural_language_query** and **query** at the same time.
     * @param {string} [params.natural_language_query] - A natural language query that returns relevant documents by
     * utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query**
     * at the same time.
     * @param {boolean} [params.passages] - A passages query that returns the most relevant passages from the results.
     * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search
     * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible
     * aggregations, see the Query reference.
     * @param {number} [params.count] - Number of results to return.
     * @param {string} [params.return_fields] - A comma-separated list of the portion of the document hierarchy to return.
     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total
     * number of results that are returned is 10 and the offset is 8, it returns the last two results.
     * @param {string} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally
     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the
     * default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias**
     * parameter.
     * @param {boolean} [params.highlight] - When true, a highlight field is returned for each result which contains the
     * fields which match the query with `<em></em>` tags around the matching query terms.
     * @param {string} [params.passages_fields] - A comma-separated list of fields that passages are drawn from. If this
     * parameter not specified, then all top-level fields are included.
     * @param {number} [params.passages_count] - The maximum number of passages to return. The search returns fewer
     * passages if the requested total is not found. The default is `10`. The maximum is `100`.
     * @param {number} [params.passages_characters] - The approximate number of characters that any one passage will have.
     * @param {boolean} [params.deduplicate] - When `true`, and used with a Watson Discovery News collection, duplicate
     * results (based on the contents of the **title** field) are removed. Duplicate comparison is limited to the current
     * query only; **offset** is not considered. This parameter is currently Beta functionality.
     * @param {string} [params.deduplicate_field] - When specified, duplicate results based on the field specified are
     * removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not
     * considered. This parameter is currently Beta functionality.
     * @param {string} [params.collection_ids] - A comma-separated list of collection IDs to be queried against. Required
     * when querying multiple collections, invalid when performing a single collection query.
     * @param {boolean} [params.similar] - When `true`, results are returned based on their similarity to the document IDs
     * specified in the **similar.document_ids** parameter.
     * @param {string} [params.similar_document_ids] - A comma-separated list of document IDs to find similar documents.
     *
     * **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search
     * with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied
     * and reduce the scope.
     * @param {string} [params.similar_fields] - A comma-separated list of field names that are used as a basis for
     * comparison to identify similar documents. If not specified, the entire document is used for comparison.
     * @param {string} [params.bias] - Field which the returned results will be biased against. The specified field must
     * be either a **date** or **number** format. When a **date** type field is specified returned results are biased
     * towards field values closer to the current date. When a **number** type field is specified, returned results are
     * biased towards higher field values. This parameter cannot be used in the same query as the **sort** parameter.
     * @param {boolean} [params.logging_opt_out] - If `true`, queries are not stored in the Discovery **Logs** endpoint.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    federatedQuery(params: DiscoveryV1.FederatedQueryParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryResponse>): Promise<any> | void;
    /**
     * Query multiple collection system notices.
     *
     * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when
     * ingesting documents and performing relevance training. See the [Discovery service
     * documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-query-concepts#query-concepts) for
     * more details on the query language.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string[]} params.collection_ids - A comma-separated list of collection IDs to be queried against.
     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.
     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and
     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most
     * relevant search results. You cannot use **natural_language_query** and **query** at the same time.
     * @param {string} [params.natural_language_query] - A natural language query that returns relevant documents by
     * utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query**
     * at the same time.
     * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search
     * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible
     * aggregations, see the Query reference.
     * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values
     * together in any one query is **10000**.
     * @param {string[]} [params.return_fields] - A comma-separated list of the portion of the document hierarchy to
     * return.
     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total
     * number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the
     * **count** and **offset** values together in any one query is **10000**.
     * @param {string[]} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally
     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the
     * default sort direction if no prefix is specified.
     * @param {boolean} [params.highlight] - When true, a highlight field is returned for each result which contains the
     * fields which match the query with `<em></em>` tags around the matching query terms.
     * @param {string} [params.deduplicate_field] - When specified, duplicate results based on the field specified are
     * removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not
     * considered. This parameter is currently Beta functionality.
     * @param {boolean} [params.similar] - When `true`, results are returned based on their similarity to the document IDs
     * specified in the **similar.document_ids** parameter.
     * @param {string[]} [params.similar_document_ids] - A comma-separated list of document IDs to find similar documents.
     *
     * **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search
     * with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied
     * and reduce the scope.
     * @param {string[]} [params.similar_fields] - A comma-separated list of field names that are used as a basis for
     * comparison to identify similar documents. If not specified, the entire document is used for comparison.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    federatedQueryNotices(params: DiscoveryV1.FederatedQueryNoticesParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryNoticesResponse>): Promise<any> | void;
    /**
     * Long collection queries.
     *
     * Complex queries might be too long for a standard method query. By using this method, you can construct longer
     * queries. However, these queries may take longer to complete than the standard method. For details, see the
     * [Discovery service
     * documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-query-concepts#query-concepts).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.
     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and
     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most
     * relevant search results. You cannot use **natural_language_query** and **query** at the same time.
     * @param {string} [params.natural_language_query] - A natural language query that returns relevant documents by
     * utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query**
     * at the same time.
     * @param {boolean} [params.passages] - A passages query that returns the most relevant passages from the results.
     * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search
     * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible
     * aggregations, see the Query reference.
     * @param {number} [params.count] - Number of results to return.
     * @param {string} [params.return_fields] - A comma-separated list of the portion of the document hierarchy to return.
     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total
     * number of results that are returned is 10 and the offset is 8, it returns the last two results.
     * @param {string} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally
     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the
     * default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias**
     * parameter.
     * @param {boolean} [params.highlight] - When true, a highlight field is returned for each result which contains the
     * fields which match the query with `<em></em>` tags around the matching query terms.
     * @param {string} [params.passages_fields] - A comma-separated list of fields that passages are drawn from. If this
     * parameter not specified, then all top-level fields are included.
     * @param {number} [params.passages_count] - The maximum number of passages to return. The search returns fewer
     * passages if the requested total is not found. The default is `10`. The maximum is `100`.
     * @param {number} [params.passages_characters] - The approximate number of characters that any one passage will have.
     * @param {boolean} [params.deduplicate] - When `true`, and used with a Watson Discovery News collection, duplicate
     * results (based on the contents of the **title** field) are removed. Duplicate comparison is limited to the current
     * query only; **offset** is not considered. This parameter is currently Beta functionality.
     * @param {string} [params.deduplicate_field] - When specified, duplicate results based on the field specified are
     * removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not
     * considered. This parameter is currently Beta functionality.
     * @param {string} [params.collection_ids] - A comma-separated list of collection IDs to be queried against. Required
     * when querying multiple collections, invalid when performing a single collection query.
     * @param {boolean} [params.similar] - When `true`, results are returned based on their similarity to the document IDs
     * specified in the **similar.document_ids** parameter.
     * @param {string} [params.similar_document_ids] - A comma-separated list of document IDs to find similar documents.
     *
     * **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search
     * with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied
     * and reduce the scope.
     * @param {string} [params.similar_fields] - A comma-separated list of field names that are used as a basis for
     * comparison to identify similar documents. If not specified, the entire document is used for comparison.
     * @param {string} [params.bias] - Field which the returned results will be biased against. The specified field must
     * be either a **date** or **number** format. When a **date** type field is specified returned results are biased
     * towards field values closer to the current date. When a **number** type field is specified, returned results are
     * biased towards higher field values. This parameter cannot be used in the same query as the **sort** parameter.
     * @param {boolean} [params.logging_opt_out] - If `true`, queries are not stored in the Discovery **Logs** endpoint.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    query(params: DiscoveryV1.QueryParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryResponse>): Promise<any> | void;
    /**
     * Knowledge Graph entity query.
     *
     * See the [Knowledge Graph documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-kg#kg) for
     * more details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} [params.feature] - The entity query feature to perform. Supported features are `disambiguate` and
     * `similar_entities`.
     * @param {QueryEntitiesEntity} [params.entity] - A text string that appears within the entity text field.
     * @param {QueryEntitiesContext} [params.context] - Entity text to provide context for the queried entity and rank
     * based on that association. For example, if you wanted to query the city of London in England your query would look
     * for `London` with the context of `England`.
     * @param {number} [params.count] - The number of results to return. The default is `10`. The maximum is `1000`.
     * @param {number} [params.evidence_count] - The number of evidence items to return for each result. The default is
     * `0`. The maximum number of evidence items per query is 10,000.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    queryEntities(params: DiscoveryV1.QueryEntitiesParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryEntitiesResponse>): Promise<any> | void;
    /**
     * Query system notices.
     *
     * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when
     * ingesting documents and performing relevance training. See the [Discovery service
     * documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-query-concepts#query-concepts) for
     * more details on the query language.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.
     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and
     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most
     * relevant search results. You cannot use **natural_language_query** and **query** at the same time.
     * @param {string} [params.natural_language_query] - A natural language query that returns relevant documents by
     * utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query**
     * at the same time.
     * @param {boolean} [params.passages] - A passages query that returns the most relevant passages from the results.
     * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search
     * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible
     * aggregations, see the Query reference.
     * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values
     * together in any one query is **10000**.
     * @param {string[]} [params.return_fields] - A comma-separated list of the portion of the document hierarchy to
     * return.
     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total
     * number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the
     * **count** and **offset** values together in any one query is **10000**.
     * @param {string[]} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally
     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the
     * default sort direction if no prefix is specified.
     * @param {boolean} [params.highlight] - When true, a highlight field is returned for each result which contains the
     * fields which match the query with `<em></em>` tags around the matching query terms.
     * @param {string[]} [params.passages_fields] - A comma-separated list of fields that passages are drawn from. If this
     * parameter not specified, then all top-level fields are included.
     * @param {number} [params.passages_count] - The maximum number of passages to return. The search returns fewer
     * passages if the requested total is not found.
     * @param {number} [params.passages_characters] - The approximate number of characters that any one passage will have.
     * @param {string} [params.deduplicate_field] - When specified, duplicate results based on the field specified are
     * removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not
     * considered. This parameter is currently Beta functionality.
     * @param {boolean} [params.similar] - When `true`, results are returned based on their similarity to the document IDs
     * specified in the **similar.document_ids** parameter.
     * @param {string[]} [params.similar_document_ids] - A comma-separated list of document IDs to find similar documents.
     *
     * **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search
     * with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied
     * and reduce the scope.
     * @param {string[]} [params.similar_fields] - A comma-separated list of field names that are used as a basis for
     * comparison to identify similar documents. If not specified, the entire document is used for comparison.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    queryNotices(params: DiscoveryV1.QueryNoticesParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryNoticesResponse>): Promise<any> | void;
    /**
     * Knowledge Graph relationship query.
     *
     * See the [Knowledge Graph documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-kg#kg) for
     * more details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {QueryRelationsEntity[]} [params.entities] - An array of entities to find relationships for.
     * @param {QueryEntitiesContext} [params.context] - Entity text to provide context for the queried entity and rank
     * based on that association. For example, if you wanted to query the city of London in England your query would look
     * for `London` with the context of `England`.
     * @param {string} [params.sort] - The sorting method for the relationships, can be `score` or `frequency`.
     * `frequency` is the number of unique times each entity is identified. The default is `score`. This parameter cannot
     * be used in the same query as the **bias** parameter.
     * @param {QueryRelationsFilter} [params.filter] -
     * @param {number} [params.count] - The number of results to return. The default is `10`. The maximum is `1000`.
     * @param {number} [params.evidence_count] - The number of evidence items to return for each result. The default is
     * `0`. The maximum number of evidence items per query is 10,000.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    queryRelations(params: DiscoveryV1.QueryRelationsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.QueryRelationsResponse>): Promise<any> | void;
    /*************************
     * trainingData
     ************************/
    /**
     * Add query to training data.
     *
     * Adds a query to the training data for this collection. The query can contain a filter and natural language query.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} [params.natural_language_query] - The natural text query for the new training query.
     * @param {string} [params.filter] - The filter used on the collection before the **natural_language_query** is
     * applied.
     * @param {TrainingExample[]} [params.examples] - Array of training examples.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    addTrainingData(params: DiscoveryV1.AddTrainingDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingQuery>): Promise<any> | void;
    /**
     * Add example to training data query.
     *
     * Adds a example to this training data query.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {string} [params.document_id] - The document ID associated with this training example.
     * @param {string} [params.cross_reference] - The cross reference associated with this training example.
     * @param {number} [params.relevance] - The relevance of the training example.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createTrainingExample(params: DiscoveryV1.CreateTrainingExampleParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingExample>): Promise<any> | void;
    /**
     * Delete all training data.
     *
     * Deletes all training data from a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteAllTrainingData(params: DiscoveryV1.DeleteAllTrainingDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Delete a training data query.
     *
     * Removes the training data query and all associated examples from the training data set.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteTrainingData(params: DiscoveryV1.DeleteTrainingDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Delete example for training data query.
     *
     * Deletes the example document with the given ID from the training data query.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {string} params.example_id - The ID of the document as it is indexed.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteTrainingExample(params: DiscoveryV1.DeleteTrainingExampleParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /**
     * Get details about a query.
     *
     * Gets details for a specific training data query, including the query string and all examples.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getTrainingData(params: DiscoveryV1.GetTrainingDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingQuery>): Promise<any> | void;
    /**
     * Get details for training data example.
     *
     * Gets the details for this training example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {string} params.example_id - The ID of the document as it is indexed.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getTrainingExample(params: DiscoveryV1.GetTrainingExampleParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingExample>): Promise<any> | void;
    /**
     * List training data.
     *
     * Lists the training data for the specified collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listTrainingData(params: DiscoveryV1.ListTrainingDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingDataSet>): Promise<any> | void;
    /**
     * List examples for a training data query.
     *
     * List all examples for this training data query.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listTrainingExamples(params: DiscoveryV1.ListTrainingExamplesParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingExampleList>): Promise<any> | void;
    /**
     * Change label or cross reference for example.
     *
     * Changes the label or cross reference query for this training data example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.collection_id - The ID of the collection.
     * @param {string} params.query_id - The ID of the query used for training.
     * @param {string} params.example_id - The ID of the document as it is indexed.
     * @param {string} [params.cross_reference] - The example to add.
     * @param {number} [params.relevance] - The relevance value for this example.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateTrainingExample(params: DiscoveryV1.UpdateTrainingExampleParams, callback?: DiscoveryV1.Callback<DiscoveryV1.TrainingExample>): Promise<any> | void;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the **X-Watson-Metadata** header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/services/discovery?topic=discovery-information-security#information-security).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customer_id - The customer ID for which all data is to be deleted.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteUserData(params: DiscoveryV1.DeleteUserDataParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Empty>): Promise<any> | void;
    /*************************
     * eventsAndFeedback
     ************************/
    /**
     * Create event.
     *
     * The **Events** API can be used to create log entries that are associated with specific queries. For example, you
     * can record which documents in the results set were \"clicked\" by a user and when that click occured.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.type - The event type to be created.
     * @param {EventData} params.data - Query event data object.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createEvent(params: DiscoveryV1.CreateEventParams, callback?: DiscoveryV1.Callback<DiscoveryV1.CreateEventResponse>): Promise<any> | void;
    /**
     * Percentage of queries with an associated event.
     *
     * The percentage of queries using the **natural_language_query** parameter that have a corresponding \"click\" event
     * over a specified time window.  This metric requires having integrated event tracking in your application using the
     * **Events** API.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start_time] - Metric is computed from data recorded after this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.end_time] - Metric is computed from data recorded before this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.result_type] - The type of result to consider when calculating the metric.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getMetricsEventRate(params?: DiscoveryV1.GetMetricsEventRateParams, callback?: DiscoveryV1.Callback<DiscoveryV1.MetricResponse>): Promise<any> | void;
    /**
     * Number of queries over time.
     *
     * Total number of queries using the **natural_language_query** parameter over a specific time window.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start_time] - Metric is computed from data recorded after this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.end_time] - Metric is computed from data recorded before this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.result_type] - The type of result to consider when calculating the metric.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getMetricsQuery(params?: DiscoveryV1.GetMetricsQueryParams, callback?: DiscoveryV1.Callback<DiscoveryV1.MetricResponse>): Promise<any> | void;
    /**
     * Number of queries with an event over time.
     *
     * Total number of queries using the **natural_language_query** parameter that have a corresponding \"click\" event
     * over a specified time window. This metric requires having integrated event tracking in your application using the
     * **Events** API.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start_time] - Metric is computed from data recorded after this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.end_time] - Metric is computed from data recorded before this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.result_type] - The type of result to consider when calculating the metric.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getMetricsQueryEvent(params?: DiscoveryV1.GetMetricsQueryEventParams, callback?: DiscoveryV1.Callback<DiscoveryV1.MetricResponse>): Promise<any> | void;
    /**
     * Number of queries with no search results over time.
     *
     * Total number of queries using the **natural_language_query** parameter that have no results returned over a
     * specified time window.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start_time] - Metric is computed from data recorded after this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.end_time] - Metric is computed from data recorded before this timestamp; must be in
     * `YYYY-MM-DDThh:mm:ssZ` format.
     * @param {string} [params.result_type] - The type of result to consider when calculating the metric.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getMetricsQueryNoResults(params?: DiscoveryV1.GetMetricsQueryNoResultsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.MetricResponse>): Promise<any> | void;
    /**
     * Most frequent query tokens with an event.
     *
     * The most frequent query tokens parsed from the **natural_language_query** parameter and their corresponding
     * \"click\" event rate within the recording period (queries and events are stored for 30 days). A query token is an
     * individual word or unigram within the query string.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values
     * together in any one query is **10000**.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getMetricsQueryTokenEvent(params?: DiscoveryV1.GetMetricsQueryTokenEventParams, callback?: DiscoveryV1.Callback<DiscoveryV1.MetricTokenResponse>): Promise<any> | void;
    /**
     * Search the query and event log.
     *
     * Searches the query and event log to find query sessions that match the specified criteria. Searching the **logs**
     * endpoint uses the standard Discovery query syntax for the parameters that are supported.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.
     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and
     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most
     * relevant search results. You cannot use **natural_language_query** and **query** at the same time.
     * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values
     * together in any one query is **10000**.
     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total
     * number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the
     * **count** and **offset** values together in any one query is **10000**.
     * @param {string[]} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally
     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the
     * default sort direction if no prefix is specified.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    queryLog(params?: DiscoveryV1.QueryLogParams, callback?: DiscoveryV1.Callback<DiscoveryV1.LogQueryResponse>): Promise<any> | void;
    /*************************
     * credentials
     ************************/
    /**
     * Create credentials.
     *
     * Creates a set of credentials to connect to a remote source. Created credentials are used in a configuration to
     * associate a collection with the remote source.
     *
     * **Note:** All credentials are sent over an encrypted connection and encrypted at rest.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.source_type] - The source that this credentials object connects to.
     * -  `box` indicates the credentials are used to connect an instance of Enterprise Box.
     * -  `salesforce` indicates the credentials are used to connect to Salesforce.
     * -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online.
     * -  `web_crawl` indicates the credentials are used to perform a web crawl.
     * =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store.
     * @param {CredentialDetails} [params.credential_details] - Object containing details of the stored credentials.
     *
     * Obtain credentials for your source from the administrator of the source.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createCredentials(params: DiscoveryV1.CreateCredentialsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Credentials>): Promise<any> | void;
    /**
     * Delete credentials.
     *
     * Deletes a set of stored credentials from your Discovery instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.credential_id - The unique identifier for a set of source credentials.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteCredentials(params: DiscoveryV1.DeleteCredentialsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.DeleteCredentials>): Promise<any> | void;
    /**
     * View Credentials.
     *
     * Returns details about the specified credentials.
     *
     *  **Note:** Secure credential information such as a password or SSH key is never returned and must be obtained from
     * the source system.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.credential_id - The unique identifier for a set of source credentials.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getCredentials(params: DiscoveryV1.GetCredentialsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Credentials>): Promise<any> | void;
    /**
     * List credentials.
     *
     * List all the source credentials that have been created for this service instance.
     *
     *  **Note:**  All credentials are sent over an encrypted connection and encrypted at rest.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listCredentials(params: DiscoveryV1.ListCredentialsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.CredentialsList>): Promise<any> | void;
    /**
     * Update credentials.
     *
     * Updates an existing set of source credentials.
     *
     * **Note:** All credentials are sent over an encrypted connection and encrypted at rest.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.credential_id - The unique identifier for a set of source credentials.
     * @param {string} [params.source_type] - The source that this credentials object connects to.
     * -  `box` indicates the credentials are used to connect an instance of Enterprise Box.
     * -  `salesforce` indicates the credentials are used to connect to Salesforce.
     * -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online.
     * -  `web_crawl` indicates the credentials are used to perform a web crawl.
     * =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store.
     * @param {CredentialDetails} [params.credential_details] - Object containing details of the stored credentials.
     *
     * Obtain credentials for your source from the administrator of the source.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    updateCredentials(params: DiscoveryV1.UpdateCredentialsParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Credentials>): Promise<any> | void;
    /*************************
     * gatewayConfiguration
     ************************/
    /**
     * Create Gateway.
     *
     * Create a gateway configuration to use with a remotely installed gateway.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} [params.name] - User-defined name.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    createGateway(params: DiscoveryV1.CreateGatewayParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Gateway>): Promise<any> | void;
    /**
     * Delete Gateway.
     *
     * Delete the specified gateway configuration.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.gateway_id - The requested gateway ID.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    deleteGateway(params: DiscoveryV1.DeleteGatewayParams, callback?: DiscoveryV1.Callback<DiscoveryV1.GatewayDelete>): Promise<any> | void;
    /**
     * List Gateway Details.
     *
     * List information about the specified gateway.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {string} params.gateway_id - The requested gateway ID.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    getGateway(params: DiscoveryV1.GetGatewayParams, callback?: DiscoveryV1.Callback<DiscoveryV1.Gateway>): Promise<any> | void;
    /**
     * List Gateways.
     *
     * List the currently configured gateways.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.environment_id - The ID of the environment.
     * @param {Object} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {Promise<any>|void}
     */
    listGateways(params: DiscoveryV1.ListGatewaysParams, callback?: DiscoveryV1.Callback<DiscoveryV1.GatewayList>): Promise<any> | void;
}
/*************************
 * interfaces
 ************************/
declare namespace DiscoveryV1 {
    /** Options for the `DiscoveryV1` constructor. */
    type Options = {
        version: string;
        url?: string;
        iam_access_token?: string;
        iam_apikey?: string;
        iam_url?: string;
        username?: string;
        password?: string;
        use_unauthenticated?: boolean;
        headers?: object;
    };
    /** The callback for a service request. */
    type Callback<T> = (error: any, body?: T, response?: AxiosResponse<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `createEnvironment` operation. */
    interface CreateEnvironmentParams {
        /** Name that identifies the environment. */
        name: string;
        /** Description of the environment. */
        description?: string;
        /** Size of the environment. In the Lite plan the default and only accepted value is `LT`, in all other plans the default is `S`. */
        size?: CreateEnvironmentConstants.Size | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `createEnvironment` operation. */
    namespace CreateEnvironmentConstants {
        /** Size of the environment. In the Lite plan the default and only accepted value is `LT`, in all other plans the default is `S`. */
        enum Size {
            LT = "LT",
            XS = "XS",
            S = "S",
            MS = "MS",
            M = "M",
            ML = "ML",
            L = "L",
            XL = "XL",
            XXL = "XXL",
            XXXL = "XXXL"
        }
    }
    /** Parameters for the `deleteEnvironment` operation. */
    interface DeleteEnvironmentParams {
        /** The ID of the environment. */
        environment_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getEnvironment` operation. */
    interface GetEnvironmentParams {
        /** The ID of the environment. */
        environment_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listEnvironments` operation. */
    interface ListEnvironmentsParams {
        /** Show only the environment with the given name. */
        name?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listFields` operation. */
    interface ListFieldsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** A comma-separated list of collection IDs to be queried against. */
        collection_ids: string[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateEnvironment` operation. */
    interface UpdateEnvironmentParams {
        /** The ID of the environment. */
        environment_id: string;
        /** Name that identifies the environment. */
        name?: string;
        /** Description of the environment. */
        description?: string;
        /** Size that the environment should be increased to. Environment size cannot be modified when using a Lite plan. Environment size can only increased and not decreased. */
        size?: UpdateEnvironmentConstants.Size | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `updateEnvironment` operation. */
    namespace UpdateEnvironmentConstants {
        /** Size that the environment should be increased to. Environment size cannot be modified when using a Lite plan. Environment size can only increased and not decreased. */
        enum Size {
            S = "S",
            MS = "MS",
            M = "M",
            ML = "ML",
            L = "L",
            XL = "XL",
            XXL = "XXL",
            XXXL = "XXXL"
        }
    }
    /** Parameters for the `createConfiguration` operation. */
    interface CreateConfigurationParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The name of the configuration. */
        name: string;
        /** The description of the configuration, if available. */
        description?: string;
        /** Document conversion settings. */
        conversions?: Conversions;
        /** An array of document enrichment settings for the configuration. */
        enrichments?: Enrichment[];
        /** Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array. */
        normalizations?: NormalizationOperation[];
        /** Object containing source parameters for the configuration. */
        source?: Source;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteConfiguration` operation. */
    interface DeleteConfigurationParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the configuration. */
        configuration_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getConfiguration` operation. */
    interface GetConfigurationParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the configuration. */
        configuration_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listConfigurations` operation. */
    interface ListConfigurationsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** Find configurations with the given name. */
        name?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateConfiguration` operation. */
    interface UpdateConfigurationParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the configuration. */
        configuration_id: string;
        /** The name of the configuration. */
        name: string;
        /** The description of the configuration, if available. */
        description?: string;
        /** Document conversion settings. */
        conversions?: Conversions;
        /** An array of document enrichment settings for the configuration. */
        enrichments?: Enrichment[];
        /** Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array. */
        normalizations?: NormalizationOperation[];
        /** Object containing source parameters for the configuration. */
        source?: Source;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `testConfigurationInEnvironment` operation. */
    interface TestConfigurationInEnvironmentParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The configuration to use to process the document. If this part is provided, then the provided configuration is used to process the document. If the **configuration_id** is also provided (both are present at the same time), then request is rejected. The maximum supported configuration size is 1 MB. Configuration parts larger than 1 MB are rejected. See the `GET /configurations/{configuration_id}` operation for an example configuration. */
        configuration?: string;
        /** The content of the document to ingest. The maximum supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a confiruration is 1 megabyte. Files larger than the supported size are rejected. */
        file?: NodeJS.ReadableStream | FileObject | Buffer;
        /** The filename for file. */
        filename?: string;
        /** The content type of file. */
        file_content_type?: TestConfigurationInEnvironmentConstants.FileContentType | string;
        /** If you're using the Data Crawler to upload your documents, you can test a document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is 1 MB. Metadata parts larger than 1 MB are rejected. Example:  ``` { "Creator": "Johnny Appleseed", "Subject": "Apples" } ```. */
        metadata?: string;
        /** Specify to only run the input document through the given step instead of running the input document through the entire ingestion workflow. Valid values are `convert`, `enrich`, and `normalize`. */
        step?: TestConfigurationInEnvironmentConstants.Step | string;
        /** The ID of the configuration to use to process the document. If the **configuration** form part is also provided (both are present at the same time), then the request will be rejected. */
        configuration_id?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `testConfigurationInEnvironment` operation. */
    namespace TestConfigurationInEnvironmentConstants {
        /** The content type of file. */
        enum FileContentType {
            APPLICATION_JSON = "application/json",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_PDF = "application/pdf",
            TEXT_HTML = "text/html",
            APPLICATION_XHTML_XML = "application/xhtml+xml"
        }
        /** Specify to only run the input document through the given step instead of running the input document through the entire ingestion workflow. Valid values are `convert`, `enrich`, and `normalize`. */
        enum Step {
            HTML_INPUT = "html_input",
            HTML_OUTPUT = "html_output",
            JSON_OUTPUT = "json_output",
            JSON_NORMALIZATIONS_OUTPUT = "json_normalizations_output",
            ENRICHMENTS_OUTPUT = "enrichments_output",
            NORMALIZATIONS_OUTPUT = "normalizations_output"
        }
    }
    /** Parameters for the `createCollection` operation. */
    interface CreateCollectionParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The name of the collection to be created. */
        name: string;
        /** A description of the collection. */
        description?: string;
        /** The ID of the configuration in which the collection is to be created. */
        configuration_id?: string;
        /** The language of the documents stored in the collection, in the form of an ISO 639-1 language code. */
        language?: CreateCollectionConstants.Language | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `createCollection` operation. */
    namespace CreateCollectionConstants {
        /** The language of the documents stored in the collection, in the form of an ISO 639-1 language code. */
        enum Language {
            EN = "en",
            ES = "es",
            DE = "de",
            AR = "ar",
            FR = "fr",
            IT = "it",
            JA = "ja",
            KO = "ko",
            PT = "pt",
            NL = "nl",
            ZH_CN = "zh-CN"
        }
    }
    /** Parameters for the `deleteCollection` operation. */
    interface DeleteCollectionParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getCollection` operation. */
    interface GetCollectionParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listCollectionFields` operation. */
    interface ListCollectionFieldsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listCollections` operation. */
    interface ListCollectionsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** Find collections with the given name. */
        name?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateCollection` operation. */
    interface UpdateCollectionParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The name of the collection. */
        name: string;
        /** A description of the collection. */
        description?: string;
        /** The ID of the configuration in which the collection is to be updated. */
        configuration_id?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createExpansions` operation. */
    interface CreateExpansionsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** An array of query expansion definitions. Each object in the **expansions** array represents a term or set of terms that will be expanded into other terms. Each expansion object can be configured as bidirectional or unidirectional. Bidirectional means that all terms are expanded to all other terms in the object. Unidirectional means that a set list of terms can be expanded into a second list of terms. To create a bi-directional expansion specify an **expanded_terms** array. When found in a query, all items in the **expanded_terms** array are then expanded to the other items in the same array. To create a uni-directional expansion, specify both an array of **input_terms** and an array of **expanded_terms**. When items in the **input_terms** array are present in a query, they are expanded using the items listed in the **expanded_terms** array. */
        expansions: Expansion[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createStopwordList` operation. */
    interface CreateStopwordListParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The content of the stopword list to ingest. */
        stopword_file: NodeJS.ReadableStream | FileObject | Buffer;
        /** The filename for stopword_file. */
        stopword_filename: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createTokenizationDictionary` operation. */
    interface CreateTokenizationDictionaryParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** An array of tokenization rules. Each rule contains, the original `text` string, component `tokens`, any alternate character set `readings`, and which `part_of_speech` the text is from. */
        tokenization_rules?: TokenDictRule[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteExpansions` operation. */
    interface DeleteExpansionsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteStopwordList` operation. */
    interface DeleteStopwordListParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteTokenizationDictionary` operation. */
    interface DeleteTokenizationDictionaryParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getStopwordListStatus` operation. */
    interface GetStopwordListStatusParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getTokenizationDictionaryStatus` operation. */
    interface GetTokenizationDictionaryStatusParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listExpansions` operation. */
    interface ListExpansionsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `addDocument` operation. */
    interface AddDocumentParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The content of the document to ingest. The maximum supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a confiruration is 1 megabyte. Files larger than the supported size are rejected. */
        file?: NodeJS.ReadableStream | FileObject | Buffer;
        /** The filename for file. */
        filename?: string;
        /** The content type of file. */
        file_content_type?: AddDocumentConstants.FileContentType | string;
        /** If you're using the Data Crawler to upload your documents, you can test a document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is 1 MB. Metadata parts larger than 1 MB are rejected. Example:  ``` { "Creator": "Johnny Appleseed", "Subject": "Apples" } ```. */
        metadata?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `addDocument` operation. */
    namespace AddDocumentConstants {
        /** The content type of file. */
        enum FileContentType {
            APPLICATION_JSON = "application/json",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_PDF = "application/pdf",
            TEXT_HTML = "text/html",
            APPLICATION_XHTML_XML = "application/xhtml+xml"
        }
    }
    /** Parameters for the `deleteDocument` operation. */
    interface DeleteDocumentParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the document. */
        document_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getDocumentStatus` operation. */
    interface GetDocumentStatusParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the document. */
        document_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateDocument` operation. */
    interface UpdateDocumentParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the document. */
        document_id: string;
        /** The content of the document to ingest. The maximum supported file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a confiruration is 1 megabyte. Files larger than the supported size are rejected. */
        file?: NodeJS.ReadableStream | FileObject | Buffer;
        /** The filename for file. */
        filename?: string;
        /** The content type of file. */
        file_content_type?: UpdateDocumentConstants.FileContentType | string;
        /** If you're using the Data Crawler to upload your documents, you can test a document against the type of metadata that the Data Crawler might send. The maximum supported metadata file size is 1 MB. Metadata parts larger than 1 MB are rejected. Example:  ``` { "Creator": "Johnny Appleseed", "Subject": "Apples" } ```. */
        metadata?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `updateDocument` operation. */
    namespace UpdateDocumentConstants {
        /** The content type of file. */
        enum FileContentType {
            APPLICATION_JSON = "application/json",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_PDF = "application/pdf",
            TEXT_HTML = "text/html",
            APPLICATION_XHTML_XML = "application/xhtml+xml"
        }
    }
    /** Parameters for the `federatedQuery` operation. */
    interface FederatedQueryParams {
        /** The ID of the environment. */
        environment_id: string;
        /** A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set. */
        filter?: string;
        /** A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time. */
        query?: string;
        /** A natural language query that returns relevant documents by utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query** at the same time. */
        natural_language_query?: string;
        /** A passages query that returns the most relevant passages from the results. */
        passages?: boolean;
        /** An aggregation search that returns an exact answer by combining query search with filters. Useful for applications to build lists, tables, and time series. For a full list of possible aggregations, see the Query reference. */
        aggregation?: string;
        /** Number of results to return. */
        count?: number;
        /** A comma-separated list of the portion of the document hierarchy to return. */
        return_fields?: string;
        /** The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. */
        offset?: number;
        /** A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias** parameter. */
        sort?: string;
        /** When true, a highlight field is returned for each result which contains the fields which match the query with `<em></em>` tags around the matching query terms. */
        highlight?: boolean;
        /** A comma-separated list of fields that passages are drawn from. If this parameter not specified, then all top-level fields are included. */
        passages_fields?: string;
        /** The maximum number of passages to return. The search returns fewer passages if the requested total is not found. The default is `10`. The maximum is `100`. */
        passages_count?: number;
        /** The approximate number of characters that any one passage will have. */
        passages_characters?: number;
        /** When `true`, and used with a Watson Discovery News collection, duplicate results (based on the contents of the **title** field) are removed. Duplicate comparison is limited to the current query only; **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate?: boolean;
        /** When specified, duplicate results based on the field specified are removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate_field?: string;
        /** A comma-separated list of collection IDs to be queried against. Required when querying multiple collections, invalid when performing a single collection query. */
        collection_ids?: string;
        /** When `true`, results are returned based on their similarity to the document IDs specified in the **similar.document_ids** parameter. */
        similar?: boolean;
        /** A comma-separated list of document IDs to find similar documents. **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied and reduce the scope. */
        similar_document_ids?: string;
        /** A comma-separated list of field names that are used as a basis for comparison to identify similar documents. If not specified, the entire document is used for comparison. */
        similar_fields?: string;
        /** Field which the returned results will be biased against. The specified field must be either a **date** or **number** format. When a **date** type field is specified returned results are biased towards field values closer to the current date. When a **number** type field is specified, returned results are biased towards higher field values. This parameter cannot be used in the same query as the **sort** parameter. */
        bias?: string;
        /** If `true`, queries are not stored in the Discovery **Logs** endpoint. */
        logging_opt_out?: boolean;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `federatedQueryNotices` operation. */
    interface FederatedQueryNoticesParams {
        /** The ID of the environment. */
        environment_id: string;
        /** A comma-separated list of collection IDs to be queried against. */
        collection_ids: string[];
        /** A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set. */
        filter?: string;
        /** A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time. */
        query?: string;
        /** A natural language query that returns relevant documents by utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query** at the same time. */
        natural_language_query?: string;
        /** An aggregation search that returns an exact answer by combining query search with filters. Useful for applications to build lists, tables, and time series. For a full list of possible aggregations, see the Query reference. */
        aggregation?: string;
        /** Number of results to return. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        count?: number;
        /** A comma-separated list of the portion of the document hierarchy to return. */
        return_fields?: string[];
        /** The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        offset?: number;
        /** A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. */
        sort?: string[];
        /** When true, a highlight field is returned for each result which contains the fields which match the query with `<em></em>` tags around the matching query terms. */
        highlight?: boolean;
        /** When specified, duplicate results based on the field specified are removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate_field?: string;
        /** When `true`, results are returned based on their similarity to the document IDs specified in the **similar.document_ids** parameter. */
        similar?: boolean;
        /** A comma-separated list of document IDs to find similar documents. **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied and reduce the scope. */
        similar_document_ids?: string[];
        /** A comma-separated list of field names that are used as a basis for comparison to identify similar documents. If not specified, the entire document is used for comparison. */
        similar_fields?: string[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `query` operation. */
    interface QueryParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set. */
        filter?: string;
        /** A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time. */
        query?: string;
        /** A natural language query that returns relevant documents by utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query** at the same time. */
        natural_language_query?: string;
        /** A passages query that returns the most relevant passages from the results. */
        passages?: boolean;
        /** An aggregation search that returns an exact answer by combining query search with filters. Useful for applications to build lists, tables, and time series. For a full list of possible aggregations, see the Query reference. */
        aggregation?: string;
        /** Number of results to return. */
        count?: number;
        /** A comma-separated list of the portion of the document hierarchy to return. */
        return_fields?: string;
        /** The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. */
        offset?: number;
        /** A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias** parameter. */
        sort?: string;
        /** When true, a highlight field is returned for each result which contains the fields which match the query with `<em></em>` tags around the matching query terms. */
        highlight?: boolean;
        /** A comma-separated list of fields that passages are drawn from. If this parameter not specified, then all top-level fields are included. */
        passages_fields?: string;
        /** The maximum number of passages to return. The search returns fewer passages if the requested total is not found. The default is `10`. The maximum is `100`. */
        passages_count?: number;
        /** The approximate number of characters that any one passage will have. */
        passages_characters?: number;
        /** When `true`, and used with a Watson Discovery News collection, duplicate results (based on the contents of the **title** field) are removed. Duplicate comparison is limited to the current query only; **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate?: boolean;
        /** When specified, duplicate results based on the field specified are removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate_field?: string;
        /** A comma-separated list of collection IDs to be queried against. Required when querying multiple collections, invalid when performing a single collection query. */
        collection_ids?: string;
        /** When `true`, results are returned based on their similarity to the document IDs specified in the **similar.document_ids** parameter. */
        similar?: boolean;
        /** A comma-separated list of document IDs to find similar documents. **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied and reduce the scope. */
        similar_document_ids?: string;
        /** A comma-separated list of field names that are used as a basis for comparison to identify similar documents. If not specified, the entire document is used for comparison. */
        similar_fields?: string;
        /** Field which the returned results will be biased against. The specified field must be either a **date** or **number** format. When a **date** type field is specified returned results are biased towards field values closer to the current date. When a **number** type field is specified, returned results are biased towards higher field values. This parameter cannot be used in the same query as the **sort** parameter. */
        bias?: string;
        /** If `true`, queries are not stored in the Discovery **Logs** endpoint. */
        logging_opt_out?: boolean;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `queryEntities` operation. */
    interface QueryEntitiesParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The entity query feature to perform. Supported features are `disambiguate` and `similar_entities`. */
        feature?: string;
        /** A text string that appears within the entity text field. */
        entity?: QueryEntitiesEntity;
        /** Entity text to provide context for the queried entity and rank based on that association. For example, if you wanted to query the city of London in England your query would look for `London` with the context of `England`. */
        context?: QueryEntitiesContext;
        /** The number of results to return. The default is `10`. The maximum is `1000`. */
        count?: number;
        /** The number of evidence items to return for each result. The default is `0`. The maximum number of evidence items per query is 10,000. */
        evidence_count?: number;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `queryNotices` operation. */
    interface QueryNoticesParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set. */
        filter?: string;
        /** A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time. */
        query?: string;
        /** A natural language query that returns relevant documents by utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query** at the same time. */
        natural_language_query?: string;
        /** A passages query that returns the most relevant passages from the results. */
        passages?: boolean;
        /** An aggregation search that returns an exact answer by combining query search with filters. Useful for applications to build lists, tables, and time series. For a full list of possible aggregations, see the Query reference. */
        aggregation?: string;
        /** Number of results to return. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        count?: number;
        /** A comma-separated list of the portion of the document hierarchy to return. */
        return_fields?: string[];
        /** The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        offset?: number;
        /** A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. */
        sort?: string[];
        /** When true, a highlight field is returned for each result which contains the fields which match the query with `<em></em>` tags around the matching query terms. */
        highlight?: boolean;
        /** A comma-separated list of fields that passages are drawn from. If this parameter not specified, then all top-level fields are included. */
        passages_fields?: string[];
        /** The maximum number of passages to return. The search returns fewer passages if the requested total is not found. */
        passages_count?: number;
        /** The approximate number of characters that any one passage will have. */
        passages_characters?: number;
        /** When specified, duplicate results based on the field specified are removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not considered. This parameter is currently Beta functionality. */
        deduplicate_field?: string;
        /** When `true`, results are returned based on their similarity to the document IDs specified in the **similar.document_ids** parameter. */
        similar?: boolean;
        /** A comma-separated list of document IDs to find similar documents. **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied and reduce the scope. */
        similar_document_ids?: string[];
        /** A comma-separated list of field names that are used as a basis for comparison to identify similar documents. If not specified, the entire document is used for comparison. */
        similar_fields?: string[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `queryRelations` operation. */
    interface QueryRelationsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** An array of entities to find relationships for. */
        entities?: QueryRelationsEntity[];
        /** Entity text to provide context for the queried entity and rank based on that association. For example, if you wanted to query the city of London in England your query would look for `London` with the context of `England`. */
        context?: QueryEntitiesContext;
        /** The sorting method for the relationships, can be `score` or `frequency`. `frequency` is the number of unique times each entity is identified. The default is `score`. This parameter cannot be used in the same query as the **bias** parameter. */
        sort?: QueryRelationsConstants.Sort | string;
        filter?: QueryRelationsFilter;
        /** The number of results to return. The default is `10`. The maximum is `1000`. */
        count?: number;
        /** The number of evidence items to return for each result. The default is `0`. The maximum number of evidence items per query is 10,000. */
        evidence_count?: number;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `queryRelations` operation. */
    namespace QueryRelationsConstants {
        /** The sorting method for the relationships, can be `score` or `frequency`. `frequency` is the number of unique times each entity is identified. The default is `score`. This parameter cannot be used in the same query as the **bias** parameter. */
        enum Sort {
            SCORE = "score",
            FREQUENCY = "frequency"
        }
    }
    /** Parameters for the `addTrainingData` operation. */
    interface AddTrainingDataParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The natural text query for the new training query. */
        natural_language_query?: string;
        /** The filter used on the collection before the **natural_language_query** is applied. */
        filter?: string;
        /** Array of training examples. */
        examples?: TrainingExample[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createTrainingExample` operation. */
    interface CreateTrainingExampleParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        /** The document ID associated with this training example. */
        document_id?: string;
        /** The cross reference associated with this training example. */
        cross_reference?: string;
        /** The relevance of the training example. */
        relevance?: number;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteAllTrainingData` operation. */
    interface DeleteAllTrainingDataParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteTrainingData` operation. */
    interface DeleteTrainingDataParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteTrainingExample` operation. */
    interface DeleteTrainingExampleParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        /** The ID of the document as it is indexed. */
        example_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getTrainingData` operation. */
    interface GetTrainingDataParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getTrainingExample` operation. */
    interface GetTrainingExampleParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        /** The ID of the document as it is indexed. */
        example_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listTrainingData` operation. */
    interface ListTrainingDataParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listTrainingExamples` operation. */
    interface ListTrainingExamplesParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateTrainingExample` operation. */
    interface UpdateTrainingExampleParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The ID of the collection. */
        collection_id: string;
        /** The ID of the query used for training. */
        query_id: string;
        /** The ID of the document as it is indexed. */
        example_id: string;
        /** The example to add. */
        cross_reference?: string;
        /** The relevance value for this example. */
        relevance?: number;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteUserData` operation. */
    interface DeleteUserDataParams {
        /** The customer ID for which all data is to be deleted. */
        customer_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createEvent` operation. */
    interface CreateEventParams {
        /** The event type to be created. */
        type: CreateEventConstants.Type | string;
        /** Query event data object. */
        data: EventData;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `createEvent` operation. */
    namespace CreateEventConstants {
        /** The event type to be created. */
        enum Type {
            CLICK = "click"
        }
    }
    /** Parameters for the `getMetricsEventRate` operation. */
    interface GetMetricsEventRateParams {
        /** Metric is computed from data recorded after this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        start_time?: string;
        /** Metric is computed from data recorded before this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        end_time?: string;
        /** The type of result to consider when calculating the metric. */
        result_type?: GetMetricsEventRateConstants.ResultType | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `getMetricsEventRate` operation. */
    namespace GetMetricsEventRateConstants {
        /** The type of result to consider when calculating the metric. */
        enum ResultType {
            DOCUMENT = "document"
        }
    }
    /** Parameters for the `getMetricsQuery` operation. */
    interface GetMetricsQueryParams {
        /** Metric is computed from data recorded after this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        start_time?: string;
        /** Metric is computed from data recorded before this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        end_time?: string;
        /** The type of result to consider when calculating the metric. */
        result_type?: GetMetricsQueryConstants.ResultType | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `getMetricsQuery` operation. */
    namespace GetMetricsQueryConstants {
        /** The type of result to consider when calculating the metric. */
        enum ResultType {
            DOCUMENT = "document"
        }
    }
    /** Parameters for the `getMetricsQueryEvent` operation. */
    interface GetMetricsQueryEventParams {
        /** Metric is computed from data recorded after this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        start_time?: string;
        /** Metric is computed from data recorded before this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        end_time?: string;
        /** The type of result to consider when calculating the metric. */
        result_type?: GetMetricsQueryEventConstants.ResultType | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `getMetricsQueryEvent` operation. */
    namespace GetMetricsQueryEventConstants {
        /** The type of result to consider when calculating the metric. */
        enum ResultType {
            DOCUMENT = "document"
        }
    }
    /** Parameters for the `getMetricsQueryNoResults` operation. */
    interface GetMetricsQueryNoResultsParams {
        /** Metric is computed from data recorded after this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        start_time?: string;
        /** Metric is computed from data recorded before this timestamp; must be in `YYYY-MM-DDThh:mm:ssZ` format. */
        end_time?: string;
        /** The type of result to consider when calculating the metric. */
        result_type?: GetMetricsQueryNoResultsConstants.ResultType | string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `getMetricsQueryNoResults` operation. */
    namespace GetMetricsQueryNoResultsConstants {
        /** The type of result to consider when calculating the metric. */
        enum ResultType {
            DOCUMENT = "document"
        }
    }
    /** Parameters for the `getMetricsQueryTokenEvent` operation. */
    interface GetMetricsQueryTokenEventParams {
        /** Number of results to return. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        count?: number;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `queryLog` operation. */
    interface QueryLogParams {
        /** A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set. */
        filter?: string;
        /** A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time. */
        query?: string;
        /** Number of results to return. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        count?: number;
        /** The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the **count** and **offset** values together in any one query is **10000**. */
        offset?: number;
        /** A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. */
        sort?: string[];
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `createCredentials` operation. */
    interface CreateCredentialsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl. =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store. */
        source_type?: CreateCredentialsConstants.SourceType | string;
        /** Object containing details of the stored credentials. Obtain credentials for your source from the administrator of the source. */
        credential_details?: CredentialDetails;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `createCredentials` operation. */
    namespace CreateCredentialsConstants {
        /** The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl. =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store. */
        enum SourceType {
            BOX = "box",
            SALESFORCE = "salesforce",
            SHAREPOINT = "sharepoint",
            WEB_CRAWL = "web_crawl",
            CLOUD_OBJECT_STORAGE = "cloud_object_storage"
        }
    }
    /** Parameters for the `deleteCredentials` operation. */
    interface DeleteCredentialsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The unique identifier for a set of source credentials. */
        credential_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getCredentials` operation. */
    interface GetCredentialsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The unique identifier for a set of source credentials. */
        credential_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listCredentials` operation. */
    interface ListCredentialsParams {
        /** The ID of the environment. */
        environment_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `updateCredentials` operation. */
    interface UpdateCredentialsParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The unique identifier for a set of source credentials. */
        credential_id: string;
        /** The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl. =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store. */
        source_type?: UpdateCredentialsConstants.SourceType | string;
        /** Object containing details of the stored credentials. Obtain credentials for your source from the administrator of the source. */
        credential_details?: CredentialDetails;
        headers?: Object;
        return_response?: boolean;
    }
    /** Constants for the `updateCredentials` operation. */
    namespace UpdateCredentialsConstants {
        /** The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl. =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store. */
        enum SourceType {
            BOX = "box",
            SALESFORCE = "salesforce",
            SHAREPOINT = "sharepoint",
            WEB_CRAWL = "web_crawl",
            CLOUD_OBJECT_STORAGE = "cloud_object_storage"
        }
    }
    /** Parameters for the `createGateway` operation. */
    interface CreateGatewayParams {
        /** The ID of the environment. */
        environment_id: string;
        /** User-defined name. */
        name?: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `deleteGateway` operation. */
    interface DeleteGatewayParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The requested gateway ID. */
        gateway_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `getGateway` operation. */
    interface GetGatewayParams {
        /** The ID of the environment. */
        environment_id: string;
        /** The requested gateway ID. */
        gateway_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /** Parameters for the `listGateways` operation. */
    interface ListGatewaysParams {
        /** The ID of the environment. */
        environment_id: string;
        headers?: Object;
        return_response?: boolean;
    }
    /*************************
     * model interfaces
     ************************/
    /** AggregationResult. */
    interface AggregationResult {
        /** Key that matched the aggregation type. */
        key?: string;
        /** Number of matching results. */
        matching_results?: number;
        /** Aggregations returned in the case of chained aggregations. */
        aggregations?: QueryAggregation[];
    }
    /** Calculation. */
    interface Calculation {
        /** The field where the aggregation is located in the document. */
        field?: string;
        /** Value of the aggregation. */
        value?: number;
    }
    /** A collection for storing documents. */
    interface Collection {
        /** The unique identifier of the collection. */
        collection_id?: string;
        /** The name of the collection. */
        name?: string;
        /** The description of the collection. */
        description?: string;
        /** The creation date of the collection in the format yyyy-MM-dd'T'HH:mmcon:ss.SSS'Z'. */
        created?: string;
        /** The timestamp of when the collection was last updated in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'. */
        updated?: string;
        /** The status of the collection. */
        status?: string;
        /** The unique identifier of the collection's configuration. */
        configuration_id?: string;
        /** The language of the documents stored in the collection. Permitted values include `en` (English), `de` (German), and `es` (Spanish). */
        language?: string;
        document_counts?: DocumentCounts;
        /** Summary of the disk usage statistics for this collection. */
        disk_usage?: CollectionDiskUsage;
        training_status?: TrainingStatus;
        /** Object containing source crawl status information. */
        source_crawl?: SourceStatus;
    }
    /** Summary of the disk usage statistics for this collection. */
    interface CollectionDiskUsage {
        /** Number of bytes used by the collection. */
        used_bytes?: number;
    }
    /** Summary of the collection usage in the environment. */
    interface CollectionUsage {
        /** Number of active collections in the environment. */
        available?: number;
        /** Total number of collections allowed in the environment. */
        maximum_allowed?: number;
    }
    /** A custom configuration for the environment. */
    interface Configuration {
        /** The unique identifier of the configuration. */
        configuration_id?: string;
        /** The name of the configuration. */
        name: string;
        /** The creation date of the configuration in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'. */
        created?: string;
        /** The timestamp of when the configuration was last updated in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'. */
        updated?: string;
        /** The description of the configuration, if available. */
        description?: string;
        /** Document conversion settings. */
        conversions?: Conversions;
        /** An array of document enrichment settings for the configuration. */
        enrichments?: Enrichment[];
        /** Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array. */
        normalizations?: NormalizationOperation[];
        /** Object containing source parameters for the configuration. */
        source?: Source;
    }
    /** Document conversion settings. */
    interface Conversions {
        /** A list of PDF conversion settings. */
        pdf?: PdfSettings;
        /** A list of Word conversion settings. */
        word?: WordSettings;
        /** A list of HTML conversion settings. */
        html?: HtmlSettings;
        /** A list of Document Segmentation settings. */
        segment?: SegmentSettings;
        /** Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array. */
        json_normalizations?: NormalizationOperation[];
    }
    /** An object defining the event being created. */
    interface CreateEventResponse {
        /** The event type that was created. */
        type?: string;
        /** Query event data object. */
        data?: EventData;
    }
    /** Object containing details of the stored credentials. Obtain credentials for your source from the administrator of the source. */
    interface CredentialDetails {
        /** The authentication method for this credentials definition. The  **credential_type** specified must be supported by the **source_type**. The following combinations are possible: -  `"source_type": "box"` - valid `credential_type`s: `oauth2` -  `"source_type": "salesforce"` - valid `credential_type`s: `username_password` -  `"source_type": "sharepoint"` - valid `credential_type`s: `saml` with **source_version** of `online`, or `ntml_v1` with **source_version** of `2016` -  `"source_type": "web_crawl"` - valid `credential_type`s: `noauth` or `basic` -  "source_type": "cloud_object_storage"` - valid `credential_type`s: `aws4_hmac`. */
        credential_type?: string;
        /** The **client_id** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. */
        client_id?: string;
        /** The **enterprise_id** of the Box site that these credentials connect to. Only valid, and required, with a **source_type** of `box`. */
        enterprise_id?: string;
        /** The **url** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `username_password`, `noauth`, and `basic`. */
        url?: string;
        /** The **username** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `saml`, `username_password`, `basic`, or `ntml_v1`. */
        username?: string;
        /** The **organization_url** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `saml`. */
        organization_url?: string;
        /** The **site_collection.path** of the source that these credentials connect to. Only valid, and required, with a **source_type** of `sharepoint`. */
        site_collection_path?: string;
        /** The **client_secret** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**. */
        client_secret?: string;
        /** The **public_key_id** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**. */
        public_key_id?: string;
        /** The **private_key** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**. */
        private_key?: string;
        /** The **passphrase** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**. */
        passphrase?: string;
        /** The **password** of the source that these credentials connect to. Only valid, and required, with **credential_type**s of `saml`, `username_password`, `basic`, or `ntml_v1`. **Note:** When used with a **source_type** of `salesforce`, the password consists of the Salesforce password and a valid Salesforce security token concatenated. This value is never returned and is only used when creating or modifying **credentials**. */
        password?: string;
        /** The ID of the **gateway** to be connected through (when connecting to intranet sites). Only valid with a **credential_type** of `noauth`, `basic`, or `ntml_v1`. Gateways are created using the `/v1/environments/{environment_id}/gateways` methods. */
        gateway_id?: string;
        /** The type of Sharepoint repository to connect to. Only valid, and required, with a **source_type** of `sharepoint`. */
        source_version?: string;
        /** SharePoint OnPrem WebApplication URL. Only valid, and required, with a **source_version** of `2016`. */
        web_application_url?: string;
        /** The domain used to log in to your OnPrem SharePoint account. Only valid, and required, with a **source_version** of `2016`. */
        domain?: string;
        /** The endpoint associated with the cloud object store that your are connecting to. Only valid, and required, with a **credential_type** of `aws4_hmac`. */
        endpoint?: string;
        /** The access key ID associated with the cloud object store. Only valid, and required, with a **credential_type** of `aws4_hmac`. For more infomation, see the [cloud object store documentation](https://cloud.ibm.com/docs/services/cloud-object-storage?topic=cloud-object-storage-using-hmac-credentials#using-hmac-credentials). */
        access_key_id?: string;
        /** The secret access key associated with the cloud object store. Only valid, and required, with a **credential_type** of `aws4_hmac`. This value is never returned and is only used when creating or modifying **credentials**. For more infomation, see the [cloud object store documentation](https://cloud.ibm.com/docs/services/cloud-object-storage?topic=cloud-object-storage-using-hmac-credentials#using-hmac-credentials). */
        secret_access_key?: string;
    }
    /** Object containing credential information. */
    interface Credentials {
        /** Unique identifier for this set of credentials. */
        credential_id?: string;
        /** The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl. =  `cloud_object_storage` indicates the credentials are used to connect to an IBM Cloud Object Store. */
        source_type?: string;
        /** Object containing details of the stored credentials. Obtain credentials for your source from the administrator of the source. */
        credential_details?: CredentialDetails;
    }
    /** CredentialsList. */
    interface CredentialsList {
        /** An array of credential definitions that were created for this instance. */
        credentials?: Credentials[];
    }
    /** DeleteCollectionResponse. */
    interface DeleteCollectionResponse {
        /** The unique identifier of the collection that is being deleted. */
        collection_id: string;
        /** The status of the collection. The status of a successful deletion operation is `deleted`. */
        status: string;
    }
    /** DeleteConfigurationResponse. */
    interface DeleteConfigurationResponse {
        /** The unique identifier for the configuration. */
        configuration_id: string;
        /** Status of the configuration. A deleted configuration has the status deleted. */
        status: string;
        /** An array of notice messages, if any. */
        notices?: Notice[];
    }
    /** Object returned after credentials are deleted. */
    interface DeleteCredentials {
        /** The unique identifier of the credentials that have been deleted. */
        credential_id?: string;
        /** The status of the deletion request. */
        status?: string;
    }
    /** DeleteDocumentResponse. */
    interface DeleteDocumentResponse {
        /** The unique identifier of the document. */
        document_id?: string;
        /** Status of the document. A deleted document has the status deleted. */
        status?: string;
    }
    /** DeleteEnvironmentResponse. */
    interface DeleteEnvironmentResponse {
        /** The unique identifier for the environment. */
        environment_id: string;
        /** Status of the environment. */
        status: string;
    }
    /** Summary of the disk usage statistics for the environment. */
    interface DiskUsage {
        /** Number of bytes within the environment's disk capacity that are currently used to store data. */
        used_bytes?: number;
        /** Total number of bytes available in the environment's disk capacity. */
        maximum_allowed_bytes?: number;
    }
    /** DocumentAccepted. */
    interface DocumentAccepted {
        /** The unique identifier of the ingested document. */
        document_id?: string;
        /** Status of the document in the ingestion process. A status of `processing` is returned for documents that are ingested with a *version* date before `2019-01-01`. The `pending` status is returned for all others. */
        status?: string;
        /** Array of notices produced by the document-ingestion process. */
        notices?: Notice[];
    }
    /** DocumentCounts. */
    interface DocumentCounts {
        /** The total number of available documents in the collection. */
        available?: number;
        /** The number of documents in the collection that are currently being processed. */
        processing?: number;
        /** The number of documents in the collection that failed to be ingested. */
        failed?: number;
        /** The number of documents that have been uploaded to the collection, but have not yet started processing. */
        pending?: number;
    }
    /** DocumentSnapshot. */
    interface DocumentSnapshot {
        /** The step in the document conversion process that the snapshot object represents. */
        step?: string;
        /** Snapshot of the conversion. */
        snapshot?: Object;
    }
    /** Status information about a submitted document. */
    interface DocumentStatus {
        /** The unique identifier of the document. */
        document_id: string;
        /** The unique identifier for the configuration. */
        configuration_id?: string;
        /** Status of the document in the ingestion process. */
        status: string;
        /** Description of the document status. */
        status_description: string;
        /** Name of the original source file (if available). */
        filename?: string;
        /** The type of the original source file. */
        file_type?: string;
        /** The SHA-1 hash of the original source file (formatted as a hexadecimal string). */
        sha1?: string;
        /** Array of notices produced by the document-ingestion process. */
        notices: Notice[];
    }
    /** Enrichment. */
    interface Enrichment {
        /** Describes what the enrichment step does. */
        description?: string;
        /** Field where enrichments will be stored. This field must already exist or be at most 1 level deeper than an existing field. For example, if `text` is a top-level field with no sub-fields, `text.foo` is a valid destination but `text.foo.bar` is not. */
        destination_field: string;
        /** Field to be enriched. Arrays can be specified as the **source_field** if the **enrichment** service for this enrichment is set to `natural_language_undstanding`. */
        source_field: string;
        /** Indicates that the enrichments will overwrite the destination_field field if it already exists. */
        overwrite?: boolean;
        /** Name of the enrichment service to call. Current options are `natural_language_understanding` and `elements`. When using `natual_language_understanding`, the **options** object must contain Natural Language Understanding options. When using `elements` the **options** object must contain Element Classification options. Additionally, when using the `elements` enrichment the configuration specified and files ingested must meet all the criteria specified in [the documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-element-classification#element-classification). */
        enrichment_name: string;
        /** If true, then most errors generated during the enrichment process will be treated as warnings and will not cause the document to fail processing. */
        ignore_downstream_errors?: boolean;
        /** An object representing the configuration options to use for the `elements` enrichment. */
        options?: EnrichmentOptions;
    }
    /** An object representing the configuration options to use for the `elements` enrichment. */
    interface EnrichmentOptions {
        features?: NluEnrichmentFeatures;
        /** ISO 639-1 code indicating the language to use for the analysis. This code overrides the automatic language detection performed by the service. Valid codes are `ar` (Arabic), `en` (English), `fr` (French), `de` (German), `it` (Italian), `pt` (Portuguese), `ru` (Russian), `es` (Spanish), and `sv` (Swedish). **Note:** Not all features support all languages, automatic detection is recommended. */
        language?: string;
        /** *For use with `elements` enrichments only.* The element extraction model to use. Models available are: `contract`. */
        model?: string;
    }
    /** Details about an environment. */
    interface Environment {
        /** Unique identifier for the environment. */
        environment_id?: string;
        /** Name that identifies the environment. */
        name?: string;
        /** Description of the environment. */
        description?: string;
        /** Creation date of the environment, in the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`. */
        created?: string;
        /** Date of most recent environment update, in the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`. */
        updated?: string;
        /** Current status of the environment. `resizing` is displayed when a request to increase the environment size has been made, but is still in the process of being completed. */
        status?: string;
        /** If `true`, the environment contains read-only collections that are maintained by IBM. */
        read_only?: boolean;
        /** Current size of the environment. */
        size?: string;
        /** The new size requested for this environment. Only returned when the environment *status* is `resizing`. *Note:* Querying and indexing can still be performed during an environment upsize. */
        requested_size?: string;
        /** Details about the resource usage and capacity of the environment. */
        index_capacity?: IndexCapacity;
        /** Information about the Continuous Relevancy Training for this environment. */
        search_status?: SearchStatus;
    }
    /** Summary of the document usage statistics for the environment. */
    interface EnvironmentDocuments {
        /** Number of documents indexed for the environment. */
        indexed?: number;
        /** Total number of documents allowed in the environment's capacity. */
        maximum_allowed?: number;
    }
    /** Query event data object. */
    interface EventData {
        /** The **environment_id** associated with the query that the event is associated with. */
        environment_id: string;
        /** The session token that was returned as part of the query results that this event is associated with. */
        session_token: string;
        /** The optional timestamp for the event that was created. If not provided, the time that the event was created in the log was used. */
        client_timestamp?: string;
        /** The rank of the result item which the event is associated with. */
        display_rank?: number;
        /** The **collection_id** of the document that this event is associated with. */
        collection_id: string;
        /** The **document_id** of the document that this event is associated with. */
        document_id: string;
        /** The query identifier stored in the log. The query and any events associated with that query are stored with the same **query_id**. */
        query_id?: string;
    }
    /** An expansion definition. Each object respresents one set of expandable strings. For example, you could have expansions for the word `hot` in one object, and expansions for the word `cold` in another. */
    interface Expansion {
        /** A list of terms that will be expanded for this expansion. If specified, only the items in this list are expanded. */
        input_terms?: string[];
        /** A list of terms that this expansion will be expanded to. If specified without **input_terms**, it also functions as the input term list. */
        expanded_terms: string[];
    }
    /** The query expansion definitions for the specified collection. */
    interface Expansions {
        /** An array of query expansion definitions. Each object in the **expansions** array represents a term or set of terms that will be expanded into other terms. Each expansion object can be configured as bidirectional or unidirectional. Bidirectional means that all terms are expanded to all other terms in the object. Unidirectional means that a set list of terms can be expanded into a second list of terms. To create a bi-directional expansion specify an **expanded_terms** array. When found in a query, all items in the **expanded_terms** array are then expanded to the other items in the same array. To create a uni-directional expansion, specify both an array of **input_terms** and an array of **expanded_terms**. When items in the **input_terms** array are present in a query, they are expanded using the items listed in the **expanded_terms** array. */
        expansions: Expansion[];
    }
    /** Field. */
    interface Field {
        /** The name of the field. */
        field_name?: string;
        /** The type of the field. */
        field_type?: string;
    }
    /** Filter. */
    interface Filter {
        /** The match the aggregated results queried for. */
        match?: string;
    }
    /** FontSetting. */
    interface FontSetting {
        /** The HTML heading level that any content with the matching font will be converted to. */
        level?: number;
        /** The minimum size of the font to match. */
        min_size?: number;
        /** The maximum size of the font to match. */
        max_size?: number;
        /** When `true`, the font is matched if it is bold. */
        bold?: boolean;
        /** When `true`, the font is matched if it is italic. */
        italic?: boolean;
        /** The name of the font. */
        name?: string;
    }
    /** Object describing a specific gateway. */
    interface Gateway {
        /** The gateway ID of the gateway. */
        gateway_id?: string;
        /** The user defined name of the gateway. */
        name?: string;
        /** The current status of the gateway. `connected` means the gateway is connected to the remotly installed gateway. `idle` means this gateway is not currently in use. */
        status?: string;
        /** The generated **token** for this gateway. The value of this field is used when configuring the remotly installed gateway. */
        token?: string;
        /** The generated **token_id** for this gateway. The value of this field is used when configuring the remotly installed gateway. */
        token_id?: string;
    }
    /** Gatway deletion confirmation. */
    interface GatewayDelete {
        /** The gateway ID of the deleted gateway. */
        gateway_id?: string;
        /** The status of the request. */
        status?: string;
    }
    /** Object containing gateways array. */
    interface GatewayList {
        /** Array of configured gateway connections. */
        gateways?: Gateway[];
    }
    /** Histogram. */
    interface Histogram {
        /** The field where the aggregation is located in the document. */
        field?: string;
        /** Interval of the aggregation. (For 'histogram' type). */
        interval?: number;
    }
    /** A list of HTML conversion settings. */
    interface HtmlSettings {
        /** Array of HTML tags that are excluded completely. */
        exclude_tags_completely?: string[];
        /** Array of HTML tags which are excluded but still retain content. */
        exclude_tags_keep_content?: string[];
        keep_content?: XPathPatterns;
        exclude_content?: XPathPatterns;
        /** An array of HTML tag attributes to keep in the converted document. */
        keep_tag_attributes?: string[];
        /** Array of HTML tag attributes to exclude. */
        exclude_tag_attributes?: string[];
    }
    /** Details about the resource usage and capacity of the environment. */
    