{"ast":null,"code":"/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar _require = require('readable-stream'),\n    Transform = _require.Transform;\n\nvar util = require('util');\n\nvar pullAllWith = require('lodash.pullallwith');\n\nvar noTimestamps = require('./no-timestamps');\n\nvar clone = require('clone');\n/**\n * Object-Mode stream that splits up results by speaker.\n *\n * Output format is similar to existing results formats, but with an extra speaker field,\n *\n * Output results array will usually contain multiple results.\n * All results are interim until the final batch; the text may change (if options.speakerlessInterim is enabled) or move from one interim result to another.\n *\n * Keywords, words_alternatives, and other features may appear on results that come slightly earlier than the timestamp due to the way things are split up.\n *\n * Ignores interim results from the service unless options.speakerlessInterim is enabled.\n *\n * @constructor\n * @param {Object} options\n * @param {boolean} [options.speakerlessInterim=false] - emit interim results before initial speaker has been identified (allows UI to update more quickly)\n */\n\n\nfunction SpeakerStream(options) {\n  options = options || {};\n  options.objectMode = true;\n  this.options = options;\n  Transform.call(this, options);\n  /**\n   * timestamps is a 2-d array.\n   * The sub-array is [word, from time, to time]\n   * Example:\n   * [\n       [\"Yes\", 28.92, 29.17],\n       [\"that's\", 29.17, 29.37],\n       [\"right\", 29.37, 29.64]\n    ]\n   * @type {Array<Array>}\n   * @private\n   */\n\n  this.results = [];\n  /**\n   * speaker_labels is an array of objects.\n   * Example:\n   * [{\n      \"from\": 28.92,\n      \"to\": 29.17,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }, {\n      \"from\": 29.17,\n      \"to\": 29.37,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }, {\n      \"from\": 29.37,\n      \"to\": 29.64,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }]\n   * @type {Array<Object>}\n   * @private\n   */\n\n  this.speaker_labels = [];\n  this.mismatchErrorEmitted = false; // flag to signal that labels were recieved before results, and therefore\n  // the stream needs to emit on the next batch of final results\n\n  this.extraLabels = false;\n}\n\nutil.inherits(SpeakerStream, Transform);\n\nSpeakerStream.prototype.isFinal = function () {\n  return this.speaker_labels.length && this.speaker_labels[this.speaker_labels.length - 1].final;\n}; // positions in the timestamps 2d array\n\n\nvar WORD = 0;\nvar FROM = 1;\nvar TO = 2;\nSpeakerStream.ERROR_MISMATCH = 'MISMATCH';\n/**\n * Builds a results object with everything we've got so far\n * @return {*}\n */\n\nSpeakerStream.prototype.buildMessage = function () {\n  var final = this.isFinal();\n  this.extraLabels = false; // first match all speaker_labeles to the appropriate word and result\n  // assumes that each speaker_label will have a matching word timestamp at the same index\n  // stops processing and emits an error if this assumption is violated\n\n  var resultIndex = 0;\n  var timestampIndex = -1;\n  var words = this.speaker_labels.map( // eslint-disable-next-line camelcase\n  function (speaker_label) {\n    var result = this.results[resultIndex];\n    timestampIndex++;\n    var timestamp = result.alternatives[0].timestamps[timestampIndex];\n\n    if (!timestamp) {\n      timestampIndex = 0;\n      resultIndex++;\n      result = this.results[resultIndex];\n      timestamp = result && result.alternatives[0].timestamps[timestampIndex];\n    }\n\n    if (!timestamp) {\n      // this shouldn't happen normally, but the TimingStream could inadvertently cause a\n      // speaker_labels to be emitted before a result\n      this.extraLabels = true;\n      return null;\n    }\n\n    if (timestamp[FROM] !== speaker_label.from || timestamp[TO] !== speaker_label.to) {\n      if (!this.mismatchErrorEmitted) {\n        var err = new Error('Mismatch between speaker_label and word timestamp');\n        err.name = SpeakerStream.ERROR_MISMATCH; // eslint-disable-next-line camelcase\n\n        err.speaker_label = speaker_label;\n        err.timestamp = timestamp; // eslint-disable-next-line camelcase\n\n        err.speaker_labels = this.speaker_labels;\n        err.results = this.results;\n        this.emit('error', err);\n        this.mismatchErrorEmitted = true; // If one is off, then a bunch probably are. Just emit one error.\n      }\n\n      return null;\n    }\n\n    return {\n      timestamp: timestamp,\n      speaker: speaker_label.speaker,\n      result: result\n    };\n  }, this); // assume that there's nothing new to emit right now,\n  // wait for new results to match our new labels\n\n  if (this.extraLabels) {\n    return;\n  } // filter out any nulls\n\n\n  words = words.filter(function (w) {\n    return w;\n  }); // group the words together into utterances by speaker\n\n  var utterances = words.reduce(function (arr, word) {\n    var utterance = arr[arr.length - 1]; // any time the speaker changes or the (original) result changes, create a new utterance\n\n    if (!utterance || utterance.speaker !== word.speaker || utterance.result !== word.result) {\n      utterance = {\n        speaker: word.speaker,\n        timestamps: [word.timestamp],\n        result: word.result\n      }; // and add it to the list\n\n      arr.push(utterance);\n    } else {\n      // otherwise just append the current word to the current result\n      utterance.timestamps.push(word.timestamp);\n    }\n\n    return arr;\n  }, []); // create new results\n\n  var results = utterances.map(function (utterance, i) {\n    // if this is the first usage of this result, clone the original (to keep keywords and such)\n    // otherwise create a new one\n    var result;\n    var lastUtterance = utterances[i - 1] || {};\n\n    if (utterance.result === lastUtterance.result) {\n      result = {\n        alternatives: [{}]\n      };\n    } else {\n      result = clone(utterance.result);\n    } // update the result object\n    // set the speaker\n\n\n    result.speaker = utterance.speaker; // overwrite the transcript and timestamps on the first alternative\n\n    var alt = result.alternatives[0];\n    alt.transcript = utterance.timestamps.map(function (ts) {\n      return ts[WORD];\n    }).join(' ') + ' ';\n    alt.timestamps = utterance.timestamps; // overwrite the final value\n\n    result.final = final;\n    var start = utterance.timestamps[0][1];\n    var end = utterance.timestamps[utterance.timestamps.length - 1][2]; // overwrite the word_alternatives\n\n    if (utterance.result.word_alternatives) {\n      var alts = utterance.result.word_alternatives.filter(function (walt) {\n        return walt.start_time >= start && walt.end_time <= end;\n      });\n      result.word_alternatives = alts;\n    } // overwrite the keywords spotted\n\n    /* eslint-disable camelcase */\n\n\n    var original_keywords_result = utterance.result.keywords_result;\n\n    if (original_keywords_result) {\n      var keywords_result = {};\n      Object.keys(original_keywords_result).forEach(function (keyword) {\n        var spottings = original_keywords_result[keyword].filter(function (spotting) {\n          return spotting.start_time >= start && spotting.end_time <= end;\n        });\n\n        if (spottings.length) {\n          keywords_result[keyword] = spottings;\n        }\n      });\n      result.keywords_result = keywords_result;\n    }\n    /* eslint-enable camelcase */\n\n\n    return result;\n  }); // result_index is always 0 because the results always includes the entire conversation so far.\n\n  return {\n    results: results,\n    result_index: 0\n  };\n};\n/**\n * Captures the timestamps out of results or errors if timestamps are missing\n * @param {Object} data\n */\n\n\nSpeakerStream.prototype.handleResults = function (data) {\n  if (noTimestamps(data)) {\n    var err = new Error('SpeakerStream requires that timestamps and speaker_labels be enabled');\n    err.name = noTimestamps.ERROR_NO_TIMESTAMPS;\n    this.emit('error', err);\n    return;\n  }\n\n  data.results.filter(function (result) {\n    return result.final;\n  }).forEach(function (result) {\n    this.results.push(result);\n  }, this);\n}; // sorts by start time and then end time\n\n\nSpeakerStream.speakerLabelsSorter = function (a, b) {\n  if (a.from === b.from) {\n    if (a.to === b.to) {\n      return 0;\n    }\n\n    return a.to < b.to ? -1 : 1;\n  }\n\n  return a.from < b.from ? -1 : 1;\n};\n/**\n * Only the very last labeled word gets final: true. Up until that point, all speaker_labels are considered interim and\n * may be repeated with a new speaker selected in a later set of speaker_labels.\n *\n * @private\n * @param {Object} data\n */\n\n\nSpeakerStream.prototype.handleSpeakerLabels = function (data) {\n  var speaker_labels = data.speaker_labels; // eslint-disable-line camelcase\n  // remove any values from the old speaker_labels that are duplicated in the new set\n\n  pullAllWith(this.speaker_labels, speaker_labels, function (old, nw) {\n    return old.from === nw.from && old.to === nw.to;\n  }); // next append the new labels to the remaining old ones\n\n  this.speaker_labels.push.apply(this.speaker_labels, data.speaker_labels); // finally, ensure the list is still sorted chronologically\n\n  this.speaker_labels.sort(SpeakerStream.speakerLabelsSorter);\n};\n\nSpeakerStream.prototype._transform = function (data, encoding, next) {\n  var message;\n\n  if (Array.isArray(data.results)) {\n    this.handleResults(data);\n\n    if (this.options.speakerlessInterim && data.results.length && data.results[0].final === false) {\n      message = this.buildMessage();\n      message.results = message.results.concat(data.results);\n    } // clean up if things got out of order\n\n\n    if (this.extraLabels && data.results.length && data.results[0].final === true) {\n      message = this.buildMessage();\n    }\n  }\n\n  if (Array.isArray(data.speaker_labels)) {\n    this.handleSpeakerLabels(data);\n    message = this.buildMessage();\n  }\n\n  if (message) {\n    /**\n     * Emit an object similar to the normal results object, only with multiple entries in the results Array (a new one\n     * each time the speaker changes), and with a speaker field on the results.\n     *\n     * result_index is always 0 because the results always includes the entire conversation so far.\n     *\n     * @event SpeakerStream#data\n     * @param {Object} results-format message with multiple results and an extra speaker field on each result\n     */\n    this.push(message);\n  }\n\n  next();\n};\n/**\n * catches cases where speaker_labels was not enabled and internal errors that cause data loss\n *\n * @param {Function} done\n * @private\n */\n\n\nSpeakerStream.prototype._flush = function (done) {\n  var timestamps = this.results.map(function (r) {\n    return r.alternatives[0].timestamps;\n  }).reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n\n  if (timestamps.length !== this.speaker_labels.length) {\n    var msg;\n\n    if (timestamps.length && !this.speaker_labels.length) {\n      msg = 'No speaker_labels found. SpeakerStream requires speaker_labels to be enabled.';\n    } else {\n      msg = 'Mismatch between number of word timestamps (' + timestamps.length + ') and number of speaker_labels (' + this.speaker_labels.length + ') - some data may be lost.';\n    }\n\n    var err = new Error(msg);\n    err.name = SpeakerStream.ERROR_MISMATCH;\n    err.speaker_labels = this.speaker_labels;\n    err.results = this.results;\n    this.emit('error', err);\n  }\n\n  done();\n};\n\nSpeakerStream.prototype.promise = require('./to-promise');\nmodule.exports = SpeakerStream;","map":null,"metadata":{},"sourceType":"script"}