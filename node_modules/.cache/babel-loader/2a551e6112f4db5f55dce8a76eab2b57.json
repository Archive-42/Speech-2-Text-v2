{"ast":null,"code":"var _jsxFileName = \"/workspace/Speech-2-Text-v2/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport recognizeMic from \"watson-speech/speech-to-text/recognize-microphone\";\n\nclass App extends Component {\n  onListenClick() {\n    fetch(\"http://localhost:3001/api/speech-to-text/token\").then(function (response) {\n      return response.text();\n    }).then(function (token) {\n      var stream = recognizeMic({\n        access_token: token,\n        // use `access_token` as the parameter name if using an RC service\n        objectMode: true,\n        // send objects instead of text\n        extractResults: true,\n        // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\n        format: false // optional - performs basic formatting on the results such as capitals an periods\n\n      });\n      stream.on(\"data\", function (data) {\n        console.log(data);\n      });\n      stream.on(\"error\", function (err) {\n        console.log(err);\n      });\n      document.querySelector(\"#stop\").onclick = stream.stop.bind(stream);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.onListenClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Listen to Mic\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/workspace/Speech-2-Text-v2/src/App.js"],"names":["React","Component","recognizeMic","App","onListenClick","fetch","then","response","text","token","stream","access_token","objectMode","extractResults","format","on","data","console","log","err","document","querySelector","onclick","stop","bind","catch","error","render","logo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AAEA,OAAOC,YAAP,MAAyB,mDAAzB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,aAAa,GAAG;AACdC,IAAAA,KAAK,CAAC,gDAAD,CAAL,CACGC,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAIQ,UAAUG,KAAV,EAAiB;AACrB,UAAIC,MAAM,GAAGR,YAAY,CAAC;AACxBS,QAAAA,YAAY,EAAEF,KADU;AACH;AACrBG,QAAAA,UAAU,EAAE,IAFY;AAEN;AAClBC,QAAAA,cAAc,EAAE,IAHQ;AAGF;AACtBC,QAAAA,MAAM,EAAE,KAJgB,CAIT;;AAJS,OAAD,CAAzB;AAOAJ,MAAAA,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,OAFD;AAIAN,MAAAA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe;AAChCF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD,OAFD;AAIAC,MAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,OAAhC,GAA0CZ,MAAM,CAACa,IAAP,CAAYC,IAAZ,CAAiBd,MAAjB,CAA1C;AACD,KArBH,EAsBGe,KAtBH,CAsBS,UAAUC,KAAV,EAAiB;AACtBT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD,KAxBH;AAyBD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,EAAEC,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAE,KAAKxB,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CADF,CADF;AAUD;;AAvCyB;;AA0C5B,eAAeD,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport recognizeMic from \"watson-speech/speech-to-text/recognize-microphone\";\n\nclass App extends Component {\n  onListenClick() {\n    fetch(\"http://localhost:3001/api/speech-to-text/token\")\n      .then(function (response) {\n        return response.text();\n      })\n      .then(function (token) {\n        var stream = recognizeMic({\n          access_token: token, // use `access_token` as the parameter name if using an RC service\n          objectMode: true, // send objects instead of text\n          extractResults: true, // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\n          format: false, // optional - performs basic formatting on the results such as capitals an periods\n        });\n\n        stream.on(\"data\", function (data) {\n          console.log(data);\n        });\n\n        stream.on(\"error\", function (err) {\n          console.log(err);\n        });\n\n        document.querySelector(\"#stop\").onclick = stream.stop.bind(stream);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button className=\"btn\" onClick={this.onListenClick}>\n            Listen to Mic\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}