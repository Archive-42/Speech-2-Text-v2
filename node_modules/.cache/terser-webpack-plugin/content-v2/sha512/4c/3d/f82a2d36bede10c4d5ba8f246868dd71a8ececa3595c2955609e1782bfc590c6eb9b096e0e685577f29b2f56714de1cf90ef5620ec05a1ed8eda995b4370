{"map":"{\"version\":3,\"sources\":[\"/workspace/Speech-2-Text-v2/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/workspace/Speech-2-Text-v2/src/logo.svg\",\"/workspace/Speech-2-Text-v2/src/App.js\",\"/workspace/Speech-2-Text-v2/src/serviceWorker.js\",\"/workspace/Speech-2-Text-v2/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"fetch\",\"then\",\"response\",\"text\",\"token\",\"stream\",\"recognizeMic\",\"access_token\",\"objectMode\",\"extractResults\",\"format\",\"on\",\"data\",\"console\",\"log\",\"err\",\"document\",\"querySelector\",\"onclick\",\"stop\",\"bind\",\"catch\",\"error\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"logo\",\"alt\",\"onClick\",\"this\",\"onListenClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kWCgDzBC,0LAxCXC,MAAM,kDACHC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GACd,IAAIC,EAASC,GAAAA,CAAa,CACxBC,aAAcH,EACdI,YAAY,EACZC,gBAAgB,EAChBC,QAAQ,IAGVL,EAAOM,GAAG,OAAQ,SAAUC,GAC1BC,QAAQC,IAAIF,KAGdP,EAAOM,GAAG,QAAS,SAAUI,GAC3BF,QAAQC,IAAIC,KAGdC,SAASC,cAAc,SAASC,QAAUb,EAAOc,KAAKC,KAAKf,KAE5DgB,MAAM,SAAUC,GACfT,QAAQC,IAAIQ,sCAIhB,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKC,EAAAA,EAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,MAAMI,QAASC,KAAKC,eAAtC,0BAjCQC,EAAAA,WCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASzB,SAAS0B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAC6C,GAClCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React, { Component } from \\\"react\\\";\\nimport logo from \\\"./logo.svg\\\";\\nimport \\\"./App.css\\\";\\n\\nimport recognizeMic from \\\"watson-speech/speech-to-text/recognize-microphone\\\";\\n\\nclass App extends Component {\\n  onListenClick() {\\n    fetch(\\\"http://localhost:3001/api/speech-to-text/token\\\")\\n      .then(function (response) {\\n        return response.text();\\n      })\\n      .then(function (token) {\\n        var stream = recognizeMic({\\n          access_token: token, // use `access_token` as the parameter name if using an RC service\\n          objectMode: true, // send objects instead of text\\n          extractResults: true, // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\\n          format: false, // optional - performs basic formatting on the results such as capitals an periods\\n        });\\n\\n        stream.on(\\\"data\\\", function (data) {\\n          console.log(data);\\n        });\\n\\n        stream.on(\\\"error\\\", function (err) {\\n          console.log(err);\\n        });\\n\\n        document.querySelector(\\\"#stop\\\").onclick = stream.stop.bind(stream);\\n      })\\n      .catch(function (error) {\\n        console.log(error);\\n      });\\n  }\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <button className=\\\"btn\\\" onClick={this.onListenClick}>\\n            Listen to Mic\\n          </button>\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === \\\"localhost\\\" ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === \\\"[::1]\\\" ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === \\\"production\\\" && \\\"serviceWorker\\\" in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener(\\\"load\\\", () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            \\\"This web app is being served cache-first by a service \\\" +\\n              \\\"worker. To learn more, visit https://bit.ly/CRA-PWA\\\"\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then((registration) => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === \\\"installed\\\") {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                \\\"New content is available and will be used when all \\\" +\\n                  \\\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\\\"\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log(\\\"Content is cached for offline use.\\\");\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch((error) => {\\n      console.error(\\\"Error during service worker registration:\\\", error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then((response) => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get(\\\"content-type\\\");\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf(\\\"javascript\\\") === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then((registration) => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        \\\"No internet connection found. App is running in offline mode.\\\"\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if (\\\"serviceWorker\\\" in navigator) {\\n    navigator.serviceWorker.ready.then((registration) => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{38:function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},42:function(e,n,t){e.exports=t(96)},47:function(e,n,t){},48:function(e,n,t){},55:function(e,n){},57:function(e,n){},66:function(e,n){},68:function(e,n){},96:function(e,n,t){\"use strict\";t.r(n);var o=t(3),c=t.n(o),a=t(34),i=t.n(a),r=(t(47),t(35)),s=t(36),l=t(40),u=t(37),f=t(41),p=t(38),d=t.n(p),h=(t(48),t(39)),m=t.n(h),g=function(e){function n(){return Object(r.a)(this,n),Object(l.a)(this,Object(u.a)(n).apply(this,arguments))}return Object(f.a)(n,e),Object(s.a)(n,[{key:\"onListenClick\",value:function(){fetch(\"http://localhost:3001/api/speech-to-text/token\").then(function(e){return e.text()}).then(function(e){var n=m()({access_token:e,objectMode:!0,extractResults:!0,format:!1});n.on(\"data\",function(e){console.log(e)}),n.on(\"error\",function(e){console.log(e)}),document.querySelector(\"#stop\").onclick=n.stop.bind(n)}).catch(function(e){console.log(e)})}},{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"App\"},c.a.createElement(\"header\",{className:\"App-header\"},c.a.createElement(\"img\",{src:d.a,className:\"App-logo\",alt:\"logo\"}),c.a.createElement(\"button\",{className:\"btn\",onClick:this.onListenClick},\"Listen to Mic\")))}}]),n}(o.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(c.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[42,1,2]]]);","extractedComments":[]}